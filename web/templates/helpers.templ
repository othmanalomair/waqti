package templates

import (
    "fmt"
    "strconv"
    "strings"
    "waqti/internal/models"
   	"github.com/google/uuid"

)

// Helper functions for all templates

// Direction helper
func getDirection(isRTL bool) string {
    if isRTL {
        return "rtl"
    }
    return "ltr"
}

// Font family helper
func getFontFamily(isRTL bool) string {
    if isRTL {
        return "Cairo, sans-serif"
    }
    return "Inter, sans-serif"
}

// Space class for RTL/LTR layouts
func getSpaceClass(isRTL bool) string {
    if isRTL {
        return "flex items-center space-x-2 space-x-reverse"
    }
    return "flex items-center space-x-2"
}

// Hover border for RTL/LTR
func getHoverBorder(isRTL bool) string {
    if isRTL {
        return "border-right: 3px solid #2DD4BF;"
    }
    return "border-left: 3px solid #2DD4BF;"
}

// Auto margin helper
func getAutoMargin(isRTL bool) string {
    if isRTL {
        return "mr-auto"
    }
    return "ml-auto"
}

// Copy tooltip helper
func getCopyTooltip(lang string) string {
    if lang == "ar" {
        return "نسخ الرابط"
    }
    return "Copy link"
}

// Menu text helper
func getMenuText(lang, item string) string {
    texts := map[string]map[string]string{
        "reorder": {
            "ar": "إعادة ترتيب الورش",
            "en": "Reorder Workshops",
        },
        "workshops": {
            "ar": "ورشاتي",
            "en": "My Workshops",
        },
        "enrollment": {
            "ar": "تتبع الطلبات",
            "en": "Order Tracking",
        },
        "categories": {
            "ar": "إدارة الفئات",
            "en": "Manage Categories",
        },
        "analytics": {
            "ar": "التحليلات",
            "en": "Analytics",
        },
        "settings": {
            "ar": "الإعدادات",
            "en": "Settings",
        },
        "customize": {
            "ar": "تخصيص صفحتك",
            "en": "Customize Page",
        },
        "qr": {
            "ar": "QR كود المتجر",
            "en": "Store QR Code",
        },
        "edit": {
            "ar": "تعديل الرابط",
            "en": "Edit URL",
        },
    }

    if itemTexts, exists := texts[item]; exists {
        if text, langExists := itemTexts[lang]; langExists {
            return text
        }
    }
    return item
}

// Dashboard menu components
templ DashboardMenuItemLink(color, iconPath, text, href string, isRTL bool) {
    <a href={ templ.SafeURL(href) } class="menu-item p-4 rounded-xl cursor-pointer transition-all duration-200 block text-center">
        <div class="flex flex-col items-center space-y-2">
            <div class={ fmt.Sprintf("w-12 h-12 bg-%s-100 rounded-xl flex items-center justify-center", color) }>
                <svg class={ fmt.Sprintf("w-6 h-6 text-%s-600", color) } fill="currentColor" viewBox="0 0 24 24">
                    <path d={ iconPath }></path>
                </svg>
            </div>
            <span class="font-medium text-slate-charcoal text-sm">{ text }</span>
        </div>
    </a>
}

templ DashboardMenuItemLinkWithBadge(color, iconPath, text, href string, badgeCount int, isRTL bool) {
    <a href={ templ.SafeURL(href) } class="menu-item p-4 rounded-xl cursor-pointer transition-all duration-200 block">
        <div class="flex items-center justify-between">
            <div class={ getSpaceClass(isRTL) }>
                <div class={ fmt.Sprintf("w-10 h-10 bg-%s-100 rounded-lg flex items-center justify-center", color) }>
                    <svg class={ fmt.Sprintf("w-5 h-5 text-%s-600", color) } fill="currentColor" viewBox="0 0 24 24">
                        <path d={ iconPath }></path>
                    </svg>
                </div>
                <span class="font-medium text-slate-charcoal">{ text }</span>
            </div>
            <div class="flex items-center space-x-2">
                if badgeCount > 0 {
                    <span class="notification-badge text-white px-2 py-1 rounded-full text-xs font-bold min-w-[20px] text-center">
                        { fmt.Sprintf("%d", badgeCount) }
                    </span>
                }
                <svg class="w-5 h-5 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path>
                </svg>
            </div>
        </div>
    </a>
}

templ OrderTrackingMenuItemWithBadge(color, iconPath, text, href string, pendingCount int, isRTL bool) {
    <a href={ templ.SafeURL(href) } class="menu-item p-4 rounded-xl cursor-pointer transition-all duration-200 block text-center relative">
        <div class="flex flex-col items-center space-y-2">
            <div class={ fmt.Sprintf("w-12 h-12 bg-%s-100 rounded-xl flex items-center justify-center relative", color) }>
                <svg class={ fmt.Sprintf("w-6 h-6 text-%s-600", color) } fill="currentColor" viewBox="0 0 24 24">
                    <path d={ iconPath }></path>
                </svg>
                if pendingCount > 0 {
                    <span class="notification-badge text-white px-1.5 py-0.5 rounded-full text-xs font-bold min-w-[16px] text-center absolute -top-1 -right-1">
                        { fmt.Sprintf("%d", pendingCount) }
                    </span>
                }
            </div>
            <span class="font-medium text-slate-charcoal text-sm">{ text }</span>
        </div>
    </a>
}

templ DashboardMenuItem(color, iconPath, text string, isRTL bool) {
    <div class="menu-item p-4 rounded-xl cursor-pointer transition-all duration-200">
        <div class="flex items-center justify-between">
            <div class={ getSpaceClass(isRTL) }>
                <div class={ fmt.Sprintf("w-10 h-10 bg-%s-100 rounded-lg flex items-center justify-center", color) }>
                    <svg class={ fmt.Sprintf("w-5 h-5 text-%s-600", color) } fill="currentColor" viewBox="0 0 24 24">
                        <path d={ iconPath }></path>
                    </svg>
                </div>
                <span class="font-medium text-slate-charcoal">{ text }</span>
            </div>
            <svg class="w-5 h-5 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                <path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path>
            </svg>
        </div>
    </div>
}

templ EditURLMenuItem(color, iconPath, text string, isRTL bool) {
    <div
        class="menu-item p-4 rounded-xl cursor-pointer transition-all duration-200"
        hx-get="/url/edit"
        hx-target="body"
        hx-swap="beforeend"
    >
        <div class="flex items-center justify-between">
            <div class={ getSpaceClass(isRTL) }>
                <div class={ fmt.Sprintf("w-10 h-10 bg-%s-100 rounded-lg flex items-center justify-center", color) }>
                    <svg class={ fmt.Sprintf("w-5 h-5 text-%s-600", color) } fill="currentColor" viewBox="0 0 24 24">
                        <path d={ iconPath }></path>
                    </svg>
                </div>
                <span class="font-medium text-slate-charcoal">{ text }</span>
            </div>
            <svg class="w-5 h-5 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                <path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path>
            </svg>
        </div>
    </div>
}

templ QRMenuItem(color, iconPath, text string, isRTL bool) {
    <div
        class="menu-item p-4 rounded-xl cursor-pointer transition-all duration-200"
        hx-get="/qr/modal"
        hx-target="body"
        hx-swap="beforeend"
    >
        <div class="flex items-center justify-between">
            <div class={ getSpaceClass(isRTL) }>
                <div class={ fmt.Sprintf("w-10 h-10 bg-%s-100 rounded-lg flex items-center justify-center", color) }>
                    <svg class={ fmt.Sprintf("w-5 h-5 text-%s-600", color) } fill="currentColor" viewBox="0 0 24 24">
                        <path d={ iconPath }></path>
                    </svg>
                </div>
                <span class="font-medium text-slate-charcoal">{ text }</span>
            </div>
            <svg class="w-5 h-5 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                <path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path>
            </svg>
        </div>
    </div>
}

// Helper function for customer form placeholders
func getCustomerPlaceholder(lang, field string) string {
    placeholders := map[string]map[string]string{
        "name": {
            "ar": "أدخل اسمك الكامل",
            "en": "Enter your full name",
        },
        "phone": {
            "ar": "مثال: +965-9999-8888",
            "en": "e.g., +965-9999-8888",
        },
    }

    if fieldTexts, exists := placeholders[field]; exists {
        if text, langExists := fieldTexts[lang]; langExists {
            return text
        }
    }
    return field
}

// Additional helper functions for workshop templates
func getWorkshopNamePlaceholder(lang string) string {
    if lang == "ar" {
        return "مثال: أساسيات تطوير الويب"
    }
    return "e.g., Web Development Fundamentals"
}

func getDescriptionPlaceholder(lang string) string {
    if lang == "ar" {
        return "اوصف ما سيتعلمه المشاركون ويختبرونه..."
    }
    return "Describe what participants will learn and experience..."
}

func getPricingLayout(isRTL bool) string {
    if isRTL {
        return "flex space-x-3 space-x-reverse"
    }
    return "flex space-x-3"
}

func getSaveButtonLayout(isRTL bool) string {
    if isRTL {
        return "flex space-x-3 space-x-reverse"
    }
    return "flex space-x-3"
}

// Store template helpers
func getCreatorName(creator *models.Creator, lang string) string {
    if lang == "ar" {
        return creator.NameAr
    }
    return creator.Name
}

func getCourseTitle(workshop models.Workshop, lang string) string {
    if lang == "ar" && workshop.TitleAr != "" {
        return workshop.TitleAr
    }
    return workshop.Title
}

func getCourseDescription(workshop models.Workshop, lang string) string {
    if lang == "ar" && workshop.DescriptionAr != "" {
        return workshop.DescriptionAr
    }
    return workshop.Description
}

// Placeholder helpers for signin/signup forms
func getPlaceholderSignin(lang, field string) string {
    placeholders := map[string]map[string]string{
        "email": {
            "ar": "أدخل بريدك الإلكتروني",
            "en": "Enter your email address",
        },
        "password": {
            "ar": "أدخل كلمة المرور",
            "en": "Enter your password",
        },
        "name": {
            "ar": "أدخل اسمك الكامل",
            "en": "Enter your full name",
        },
        "confirm_password": {
            "ar": "أعد إدخال كلمة المرور",
            "en": "Confirm your password",
        },
    }

    if fieldTexts, exists := placeholders[field]; exists {
        if text, langExists := fieldTexts[lang]; langExists {
            return text
        }
    }
    return field
}

// Settings page placeholder helper
func getPlaceholder(lang, field string) string {
    placeholders := map[string]map[string]string{
        "creator_name_en": {
            "ar": "الاسم بالإنجليزية",
            "en": "Name in English",
        },
        "creator_name_ar": {
            "ar": "الاسم بالعربية",
            "en": "Name in Arabic",
        },
        "sub_header_en": {
            "ar": "مثال: Certified Design Trainer",
            "en": "e.g., Certified Design Trainer",
        },
        "sub_header_ar": {
            "ar": "مثال: مدرب معتمد في التصميم",
            "en": "e.g., مدرب معتمد في التصميم",
        },
        "whatsapp": {
            "ar": "مثال: +965-9999-8888",
            "en": "e.g., +965-9999-8888",
        },
        "greeting_en": {
            "ar": "رسالة الترحيب بالإنجليزية",
            "en": "Welcome message in English",
        },
        "greeting_ar": {
            "ar": "رسالة الترحيب بالعربية",
            "en": "Welcome message in Arabic",
        },
        "currency_en": {
            "ar": "KD",
            "en": "KD",
        },
        "currency_ar": {
            "ar": "د.ك",
            "en": "د.ك",
        },
        "name": {
            "ar": "أدخل اسمك الكامل",
            "en": "Enter your full name",
        },
        "email": {
            "ar": "أدخل بريدك الإلكتروني",
            "en": "Enter your email address",
        },
        "password": {
            "ar": "أدخل كلمة المرور",
            "en": "Enter your password",
        },
        "confirm_password": {
            "ar": "أعد إدخال كلمة المرور",
            "en": "Confirm your password",
        },
    }

    if fieldTexts, exists := placeholders[field]; exists {
        if text, langExists := fieldTexts[lang]; langExists {
            return text
        }
    }
    return field
}

// Customer Info Modal Component
templ CustomerInfoModal(lang string, isRTL bool) {
    <!-- Customer Info Modal -->
    <div
        x-show="showCustomerForm"
        x-transition:enter="transition ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="transition ease-in duration-200"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
        class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4"
        x-on:click.self="showCustomerForm = false"
    >
        <div
            class="bg-white rounded-2xl max-w-md w-full p-6"
            x-transition:enter="transition ease-out duration-300"
            x-transition:enter-start="opacity-0 scale-95"
            x-transition:enter-end="opacity-100 scale-100"
            x-transition:leave="transition ease-in duration-200"
            x-transition:leave-start="opacity-100 scale-100"
            x-transition:leave-end="opacity-0 scale-95"
        >
            <div class="flex items-center justify-between mb-6">
                <h3 class="text-xl font-bold text-slate-charcoal">
                    if lang == "ar" {
                        معلومات العميل
                    } else {
                        Customer Information
                    }
                </h3>
                <button x-on:click="showCustomerForm = false" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                    </svg>
                </button>
            </div>

            <form x-on:submit.prevent="submitOrder()" class="space-y-4">
                <!-- Customer Name -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                        if lang == "ar" {
                            الاسم الكامل *
                        } else {
                            Full Name *
                        }
                    </label>
                    <input
                        type="text"
                        x-model="customerInfo.name"
                        placeholder={ getCustomerPlaceholder(lang, "name") }
                        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gulf-teal focus:border-transparent"
                        required
                    />
                </div>

                <!-- Customer Phone -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                        if lang == "ar" {
                            رقم الهاتف *
                        } else {
                            Phone Number *
                        }
                    </label>
                    <input
                        type="tel"
                        x-model="customerInfo.phone"
                        placeholder={ getCustomerPlaceholder(lang, "phone") }
                        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-gulf-teal focus:border-transparent"
                        required
                    />
                </div>

                <!-- Order Summary -->
                <div class="bg-gray-50 rounded-lg p-4">
                    <h4 class="font-semibold text-gray-800 mb-3">
                        if lang == "ar" {
                            ملخص الطلب
                        } else {
                            Order Summary
                        }
                    </h4>
                    <div class="space-y-2">
                        <template x-for="item in cart" :key="item.id">
                            <div class="flex justify-between text-sm">
                                <span x-text="item.title"></span>
                                <span x-text="item.price + ' KD'" class="text-gulf-teal font-medium"></span>
                            </div>
                        </template>
                        <div class="border-t pt-2 mt-2">
                            <div class="flex justify-between font-bold">
                                <span>
                                    if lang == "ar" {
                                        المجموع:
                                    } else {
                                        Total:
                                    }
                                </span>
                                <span x-text="getTotalPrice() + ' KD'" class="text-gulf-teal"></span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Submit Button -->
                <button
                    type="submit"
                    class="w-full bg-gulf-teal text-white py-3 rounded-lg font-semibold hover:bg-teal-600 transition-colors"
                >
                    if lang == "ar" {
                        إرسال الطلب عبر واتساب
                    } else {
                        Send Order via WhatsApp
                    }
                </button>
            </form>

            <!-- Note -->
            <p class="text-xs text-gray-500 mt-4 text-center">
                if lang == "ar" {
                    سيتم توجيهك إلى واتساب لإكمال الطلب
                } else {
                    You will be redirected to WhatsApp to complete your order
                }
            </p>
        </div>
    </div>
}

func uuidToString(id uuid.UUID) string {
	return id.String()
}

// Helper function for max changes reached tooltip
func getMaxChangesReachedText(lang string) string {
    if lang == "ar" {
        return "تم استخدام جميع التغييرات المتاحة"
    }
    return "All available changes used"
}

// Shop settings helpers
func getSettingsCreatorName(settings *models.ShopSettings, lang string) string {
    if lang == "ar" && settings.CreatorNameAr != "" {
        return settings.CreatorNameAr
    }
    return settings.CreatorName
}

func getSettingsDescription(settings *models.ShopSettings, lang string) string {
    if lang == "ar" && settings.SubHeaderAr != "" {
        return settings.SubHeaderAr
    }
    return settings.SubHeader
}

// Session helpers
func formatSessionDateTime(session models.WorkshopSession, lang string) string {
    // Combine session date and start time
    sessionDateTime := session.SessionDate.Format("Jan 2, 2006") + " " + session.StartTime
    if lang == "ar" {
        // For Arabic, you might want to use Arabic month names
        return session.SessionDate.Format("2 Jan 2006") + " " + session.StartTime
    }
    return sessionDateTime
}

func getAvailableSeats(session models.WorkshopSession) int {
    if session.MaxAttendees == 0 {
        return 0 // Unlimited
    }
    return session.MaxAttendees - session.CurrentAttendees
}

func formatSessionTime(startTime string) string {
    // Handle special cases
    if startTime == "TBD" || startTime == "" {
        return "Time TBD"
    }
    
    // Remove any timezone info or extra characters
    startTime = strings.TrimSpace(startTime)
    
    // Handle ISO format dates (like "0000-01-01T20:00:00Z")
    if strings.Contains(startTime, "T") {
        timePart := strings.Split(startTime, "T")[1]
        if timePart != "" {
            startTime = strings.Split(timePart, "Z")[0] // Remove Z if present
        }
    }
    
    // Parse the time string (format: "15:04:05" or "15:04")
    if len(startTime) >= 5 {
        // Extract hours and minutes
        hours := startTime[:2]
        minutes := startTime[3:5]
        
        // Convert to 12-hour format
        hour := 0
        if h, err := strconv.Atoi(hours); err == nil {
            hour = h
        } else {
            return startTime // Return original if parsing fails
        }
        
        // Validate hour range
        if hour < 0 || hour > 23 {
            return startTime
        }
        
        // Validate minutes format - pad with zero if needed
        if len(minutes) == 1 {
            minutes = "0" + minutes
        }
        
        ampm := "AM"
        displayHour := hour
        if hour >= 12 {
            ampm = "PM"
            if hour > 12 {
                displayHour = hour - 12
            }
        }
        if displayHour == 0 {
            displayHour = 12
        }
        
        return fmt.Sprintf("%d:%s %s", displayHour, minutes, ampm)
    }
    return startTime
}

// Helper function to format duration in hours
func formatDurationInHours(durationMinutes int, lang string) string {
    hours := float64(durationMinutes) / 60.0
    
    // Format with 1 decimal place if needed, remove unnecessary zeros
    hoursStr := fmt.Sprintf("%.1f", hours)
    if strings.HasSuffix(hoursStr, ".0") {
        hoursStr = strings.TrimSuffix(hoursStr, ".0")
    }
    
    if lang == "ar" {
        if hours == 1.0 {
            return hoursStr + " ساعة"
        }
        return hoursStr + " ساعة"
    } else {
        if hours == 1.0 {
            return hoursStr + " hour"
        }
        return hoursStr + " hours"
    }
}

// Helper function to format workshop duration based on session times
func formatWorkshopDurationFromSessions(workshop models.Workshop, lang string) string {
    if len(workshop.Sessions) == 0 {
        // Fall back to workshop duration if no sessions
        return formatDurationInHours(workshop.Duration, lang)
    }
    
    // Get the last session that was added (highest index)
    lastSession := workshop.Sessions[len(workshop.Sessions)-1]
    
    // Calculate duration based on start and end time of the last session
    startTime := lastSession.StartTime
    endTime := ""
    if lastSession.EndTime != nil {
        endTime = *lastSession.EndTime
    }
    
    // If no end time, fall back to workshop duration
    if endTime == "" {
        return formatDurationInHours(workshop.Duration, lang)
    }
    
    // Parse start and end times to calculate duration
    durationMinutes := calculateSessionDuration(startTime, endTime)
    if durationMinutes <= 0 {
        // If calculation fails, fall back to workshop duration
        return formatDurationInHours(workshop.Duration, lang)
    }
    
    return formatDurationInHours(durationMinutes, lang)
}

// Helper function to calculate duration between start and end time
func calculateSessionDuration(startTime, endTime string) int {
    // Parse time strings (format: "15:04:05" or "15:04" or ISO format)
    parseTime := func(timeStr string) (int, int, error) { // returns hour, minute, error
        if timeStr == "TBD" || timeStr == "" {
            return 0, 0, fmt.Errorf("invalid time")
        }
        
        // Handle ISO format dates (like "0000-01-01T20:00:00Z")
        if strings.Contains(timeStr, "T") {
            timePart := strings.Split(timeStr, "T")[1]
            if timePart != "" {
                timeStr = strings.Split(timePart, "Z")[0] // Remove Z if present
            }
        }
        
        timeStr = strings.TrimSpace(timeStr)
        
        if len(timeStr) >= 5 {
            hours := timeStr[:2]
            minutes := timeStr[3:5]
            
            hour, err1 := strconv.Atoi(hours)
            minute, err2 := strconv.Atoi(minutes)
            
            if err1 != nil || err2 != nil || hour < 0 || hour > 23 || minute < 0 || minute > 59 {
                return 0, 0, fmt.Errorf("invalid time format")
            }
            
            return hour, minute, nil
        }
        
        return 0, 0, fmt.Errorf("invalid time format")
    }
    
    startHour, startMin, err1 := parseTime(startTime)
    endHour, endMin, err2 := parseTime(endTime)
    
    if err1 != nil || err2 != nil {
        return 0
    }
    
    // Convert to minutes since midnight
    startMinutes := startHour*60 + startMin
    endMinutes := endHour*60 + endMin
    
    // Handle case where end time is next day (crosses midnight)
    if endMinutes < startMinutes {
        endMinutes += 24 * 60 // Add 24 hours
    }
    
    duration := endMinutes - startMinutes
    if duration <= 0 {
        return 0
    }
    
    return duration
}

// Workshop session display helpers
func getWorkshopScheduleText(workshop models.Workshop, lang string) string {
	if len(workshop.Sessions) == 0 {
		if lang == "ar" {
			return "لم يتم تحديد جلسات بعد"
		}
		return "No sessions scheduled yet"
	}

	switch workshop.WorkshopType {
	case "single":
		return getSingleDayScheduleText(workshop.Sessions[0], lang)
	case "consecutive":
		return getConsecutiveScheduleText(workshop.Sessions, lang)
	case "spread":
		return getSpreadScheduleText(workshop.Sessions, lang)
	case "custom":
		return getCustomScheduleText(workshop.Sessions, lang)
	default:
		return getSingleDayScheduleText(workshop.Sessions[0], lang)
	}
}

func getSingleDayScheduleText(session models.WorkshopSession, lang string) string {
	date := session.SessionDate.Format("Jan 2")
	time := formatSessionTime(session.StartTime)
	
	if lang == "ar" {
		months := map[string]string{
			"Jan": "يناير", "Feb": "فبراير", "Mar": "مارس", "Apr": "أبريل",
			"May": "مايو", "Jun": "يونيو", "Jul": "يوليو", "Aug": "أغسطس",
			"Sep": "سبتمبر", "Oct": "أكتوبر", "Nov": "نوفمبر", "Dec": "ديسمبر",
		}
		
		parts := strings.Split(date, " ")
		if len(parts) == 2 {
			if arabicMonth, exists := months[parts[0]]; exists {
				date = parts[1] + " " + arabicMonth
			}
		}
		return fmt.Sprintf("%s الساعة %s", date, time)
	}
	return fmt.Sprintf("%s at %s", date, time)
}

func getConsecutiveScheduleText(sessions []models.WorkshopSession, lang string) string {
	if len(sessions) <= 1 {
		if len(sessions) == 1 {
			return getSingleDayScheduleText(sessions[0], lang)
		}
		return ""
	}

	startDate := sessions[0].SessionDate.Format("Jan 2")
	endDate := sessions[len(sessions)-1].SessionDate.Format("Jan 2")
	daysCount := len(sessions)

	// Check if all sessions have the same time
	firstTime := sessions[0].StartTime
	allSameTime := true
	for _, session := range sessions[1:] {
		if session.StartTime != firstTime {
			allSameTime = false
			break
		}
	}

	if allSameTime {
		// All sessions have same time - show compact format
		time := formatSessionTime(firstTime)
		if lang == "ar" {
			return fmt.Sprintf("%d أيام: %s - %s الساعة %s", daysCount, startDate, endDate, time)
		}
		return fmt.Sprintf("%d days: %s - %s at %s", daysCount, startDate, endDate, time)
	} else {
		// Different times - show each session separately
		if lang == "ar" {
			return fmt.Sprintf("%d أيام متتالية", daysCount)
		}
		return fmt.Sprintf("%d consecutive days", daysCount)
	}
}

func getSpreadScheduleText(sessions []models.WorkshopSession, lang string) string {
	if len(sessions) <= 1 {
		if len(sessions) == 1 {
			return getSingleDayScheduleText(sessions[0], lang)
		}
		return ""
	}

	// Check if all sessions have the same time
	firstTime := sessions[0].StartTime
	allSameTime := true
	for _, session := range sessions[1:] {
		if session.StartTime != firstTime {
			allSameTime = false
			break
		}
	}

	if allSameTime {
		// All sessions have same time - show compact format with weekdays
		weekdaysMap := make(map[string]bool)
		for _, session := range sessions {
			weekday := session.SessionDate.Weekday().String()
			weekdaysMap[weekday] = true
		}

		var weekdays []string
		for weekday := range weekdaysMap {
			weekdays = append(weekdays, weekday)
		}

		time := formatSessionTime(firstTime)
		startDate := sessions[0].SessionDate.Format("Jan 2")
		endDate := sessions[len(sessions)-1].SessionDate.Format("Jan 2")

		if lang == "ar" {
			weekdayMap := map[string]string{
				"Sunday": "الأحد", "Monday": "الاثنين", "Tuesday": "الثلاثاء", "Wednesday": "الأربعاء",
				"Thursday": "الخميس", "Friday": "الجمعة", "Saturday": "السبت",
			}
			
			var arabicWeekdays []string
			for _, weekday := range weekdays {
				if arabic, exists := weekdayMap[weekday]; exists {
					arabicWeekdays = append(arabicWeekdays, arabic)
				}
			}
			
			return fmt.Sprintf("%s (%s - %s) الساعة %s", strings.Join(arabicWeekdays, "، "), startDate, endDate, time)
		}
		return fmt.Sprintf("%s (%s - %s) at %s", strings.Join(weekdays, ", "), startDate, endDate, time)
	} else {
		// Different times - show spread out format
		if lang == "ar" {
			return fmt.Sprintf("%d جلسات موزعة", len(sessions))
		}
		return fmt.Sprintf("%d spread sessions", len(sessions))
	}
}

func getCustomScheduleText(sessions []models.WorkshopSession, lang string) string {
	if len(sessions) <= 1 {
		if len(sessions) == 1 {
			return getSingleDayScheduleText(sessions[0], lang)
		}
		return ""
	}

	sessionCount := len(sessions)
	
	// Check if all sessions have the same time
	firstTime := sessions[0].StartTime
	allSameTime := true
	for _, session := range sessions[1:] {
		if session.StartTime != firstTime {
			allSameTime = false
			break
		}
	}

	if allSameTime {
		// All sessions have same time - show compact format
		time := formatSessionTime(firstTime)
		
		// Show first few dates to give users an idea of the schedule
		var dateList []string
		maxDatesToShow := 3
		if sessionCount < maxDatesToShow {
			maxDatesToShow = sessionCount
		}
		
		for i := 0; i < maxDatesToShow; i++ {
			dateList = append(dateList, sessions[i].SessionDate.Format("Jan 2"))
		}
		
		dates := strings.Join(dateList, ", ")
		if sessionCount > maxDatesToShow {
			if lang == "ar" {
				dates += "، وأكثر..."
			} else {
				dates += ", ..."
			}
		}

		if lang == "ar" {
			return fmt.Sprintf("%d جلسات مخصصة (%s) الساعة %s", sessionCount, dates, time)
		}
		return fmt.Sprintf("%d custom sessions (%s) at %s", sessionCount, dates, time)
	} else {
		// Different times - show each session separately with date and time
		if lang == "ar" {
			return fmt.Sprintf("%d جلسات مخصصة", sessionCount)
		}
		return fmt.Sprintf("%d custom sessions", sessionCount)
	}
}

// Helper function to check if all sessions have the same time
func hasAllSameTime(sessions []models.WorkshopSession) bool {
	if len(sessions) <= 1 {
		return true
	}
	
	firstTime := sessions[0].StartTime
	for _, session := range sessions[1:] {
		if session.StartTime != firstTime {
			return false
		}
	}
	return true
}

// Template component for detailed session display
templ getDetailedSessionDisplay(workshop models.Workshop, lang string) {
	if hasAllSameTime(workshop.Sessions) {
		<!-- All sessions have same time - show compact format -->
		<p class="text-sm text-blue-700 font-medium">
			{ getWorkshopScheduleText(workshop, lang) }
		</p>
	} else {
		<!-- Different times - show each session separately -->
		<div class="space-y-2">
			<p class="text-sm text-blue-700 font-semibold">
				{ getWorkshopScheduleText(workshop, lang) }
			</p>
			<div class="space-y-1 pl-2 border-l-2 border-blue-300">
				for _, session := range workshop.Sessions {
					<div class="text-xs text-blue-600 flex items-center justify-between">
						<span>{ session.SessionDate.Format("Jan 2") }</span>
						<span class="font-medium">{ formatSessionTime(session.StartTime) }</span>
					</div>
				}
			</div>
		</div>
	}
}
