package templates

import (
    "fmt"
    "waqti/internal/models"
)

templ ReorderWorkshopsPage(creator *models.Creator, workshops []models.Workshop, stats models.DashboardStats, settings *models.ShopSettings, lang string, isRTL bool) {
    <!DOCTYPE html>
    <html lang={ lang } dir={ getDirection(isRTL) }>
    <head>
        <meta charset="UTF-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
        <title>
            if lang == "ar" {
                إعادة ترتيب الورش - Waqti.me
            } else {
                Reorder Workshops - Waqti.me
            }
        </title>
        <script src="https://cdn.tailwindcss.com"></script>
        <script src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
        <script src="https://unpkg.com/htmx.org@1.9.10"></script>
        <link rel="preconnect" href="https://fonts.googleapis.com"/>
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Cairo:wght@400;500;600;700&display=swap"/>
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"/>

        <script>
            tailwind.config = {
                theme: {
                    extend: {
                        colors: {
                            'gulf-teal': '#2DD4BF',
                            'ivory-sand': '#FEFCE8',
                            'slate-charcoal': '#1E293B'
                        },
                        fontFamily: {
                            'cairo': ['Cairo', 'sans-serif'],
                            'inter': ['Inter', 'sans-serif']
                        }
                    }
                }
            }
        </script>

        <style>
            .font-primary {
                font-family: { getFontFamily(isRTL) };
            }

            .gradient-bg {
                background: linear-gradient(135deg, #F0FDFA 0%, #FEFCE8 100%);
            }

            .card-shadow {
                box-shadow: 0 4px 20px rgba(45, 212, 191, 0.1);
            }

            .badge {
                background: linear-gradient(45deg, #2DD4BF, #06B6D4);
            }

            .workshop-row:hover {
                background-color: rgba(45, 212, 191, 0.05);
            }

            .reorder-btn:hover {
                background-color: rgba(45, 212, 191, 0.1);
            }

            .success-message {
                background: linear-gradient(135deg, #10B981 0%, #059669 100%);
                animation: slideInFromTop 0.5s ease-out;
            }

            @keyframes slideInFromTop {
                from {
                    transform: translateY(-100%);
                    opacity: 0;
                }
                to {
                    transform: translateY(0);
                    opacity: 1;
                }
            }

            .workshop-image {
                width: 60px;
                height: 60px;
                object-fit: cover;
                border-radius: 8px;
            }

            .empty-state {
                background: linear-gradient(135deg, rgba(45, 212, 191, 0.05) 0%, rgba(255, 255, 255, 0.8) 100%);
                border: 2px dashed rgba(45, 212, 191, 0.3);
            }

            /* Text truncation for descriptions */
            .description-truncate {
                display: -webkit-box;
                -webkit-line-clamp: 2;
                -webkit-box-orient: vertical;
                overflow: hidden;
                text-overflow: ellipsis;
                line-height: 1.4;
                max-height: 2.8em;
            }

            /* Workshop card styles */
            .workshop-card {
                transition: transform 0.2s ease, box-shadow 0.2s ease;
            }
            
            .workshop-card:hover {
                transform: translateY(-1px);
                box-shadow: 0 8px 25px rgba(45, 212, 191, 0.15);
            }

            /* Switch styles */
            .peer:checked + div {
                background-color: #2DD4BF;
            }
            
            .peer:focus + div {
                box-shadow: 0 0 0 4px rgba(45, 212, 191, 0.2);
            }

            /* Prevent text overflow */
            .workshop-title {
                word-break: break-word;
                hyphens: auto;
            }
        </style>
    </head>
    <body class="gradient-bg min-h-screen font-primary">

        <!-- Success Message -->
        <div x-data="{
            showSuccess: new URLSearchParams(window.location.search).get('success'),
            successMessage: ''
        }" x-init="
            if (showSuccess) {
                successMessage = getSuccessMessage(showSuccess);
                setTimeout(() => showSuccess = false, 5000);
                // Clean URL
                window.history.replaceState({}, document.title, window.location.pathname);
            }
        ">
            <div
                x-show="showSuccess"
                x-transition:enter="transition ease-out duration-500"
                x-transition:enter-start="transform -translate-y-full opacity-0"
                x-transition:enter-end="transform translate-y-0 opacity-100"
                x-transition:leave="transition ease-in duration-300"
                x-transition:leave-start="transform translate-y-0 opacity-100"
                x-transition:leave-end="transform -translate-y-full opacity-0"
                class="success-message fixed top-0 left-0 right-0 z-50 p-4 text-white text-center font-medium"
            >
                <div class="max-w-md mx-auto flex items-center justify-center space-x-2">
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                    </svg>
                    <span x-text="successMessage"></span>
                </div>
            </div>
        </div>

        <!-- Header with Back Button -->
        <header class="bg-white/80 backdrop-blur-sm border-b border-gulf-teal/20 sticky top-0 z-40">
            <div class="max-w-md mx-auto px-4 py-4">
                <div class="flex items-center space-x-3">
                    <a href="/dashboard" class="p-2 hover:bg-gray-100 rounded-lg transition-colors">
                        <svg class="w-5 h-5 text-slate-charcoal" fill="currentColor" viewBox="0 0 24 24">
                            if isRTL {
                                <path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"/>
                            } else {
                                <path d="M15.41 16.34L10.83 11.75l4.58-4.59L14 5.75l-6 6 6 6z"/>
                            }
                        </svg>
                    </a>
                    <h1 class="text-lg font-bold text-slate-charcoal">
                        if lang == "ar" {
                            إعادة ترتيب الورش
                        } else {
                            Reorder Workshops
                        }
                    </h1>
                </div>
            </div>
        </header>

        <!-- Main Content -->
        <main class="max-w-md mx-auto px-4 py-6 space-y-6">

            <!-- Workshop Overview -->
            <div class="bg-white rounded-2xl p-6 card-shadow">
                <h2 class="text-lg font-bold text-slate-charcoal mb-4">
                    if lang == "ar" {
                        نظرة عامة على الورش
                    } else {
                        Workshop Overview
                    }
                </h2>

                <div class="grid grid-cols-3 gap-4">
                    <!-- Total Workshops -->
                    <div class="text-center">
                        <div class="text-2xl font-bold text-gulf-teal">{ fmt.Sprintf("%d", stats.TotalWorkshops) }</div>
                        <div class="text-xs text-gray-500">
                            if lang == "ar" {
                                إجمالي الورش
                            } else {
                                Total Workshops
                            }
                        </div>
                    </div>

                    <!-- Active Workshops -->
                    <div class="text-center">
                        <div class="text-2xl font-bold text-green-600">{ fmt.Sprintf("%d", stats.ActiveWorkshops) }</div>
                        <div class="text-xs text-gray-500">
                            if lang == "ar" {
                                الورش النشطة
                            } else {
                                Active Workshops
                            }
                        </div>
                    </div>

                    <!-- Total Enrollments -->
                    <div class="text-center">
                        <div class="text-2xl font-bold text-orange-600">{ fmt.Sprintf("%d", stats.TotalEnrollments) }</div>
                        <div class="text-xs text-gray-500">
                            if lang == "ar" {
                                إجمالي التسجيلات
                            } else {
                                Total Enrollments
                            }
                        </div>
                    </div>
                </div>

                <!-- Revenue Stats -->
                <div class="mt-4 pt-4 border-t border-gray-100">
                    <div class="grid grid-cols-2 gap-4">
                        <div class="text-center">
                            <div class="text-lg font-bold text-purple-600">{ fmt.Sprintf("%.0f %s", stats.MonthlyRevenue, getCurrencySymbol(settings, lang)) }</div>
                            <div class="text-xs text-gray-500">
                                if lang == "ar" {
                                    الإيرادات الشهرية
                                } else {
                                    Monthly Revenue
                                }
                            </div>
                        </div>
                        <div class="text-center">
                            <div class="text-lg font-bold text-blue-600">{ fmt.Sprintf("%.0f %s", stats.ProjectedSales, getCurrencySymbol(settings, lang)) }</div>
                            <div class="text-xs text-gray-500">
                                if lang == "ar" {
                                    المبيعات المتوقعة
                                } else {
                                    Projected Sales
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Add New Workshop Button -->
            <a href="/workshops/add" class="w-full bg-gulf-teal text-white py-3 rounded-xl font-medium hover:bg-teal-600 transition-colors flex items-center justify-center space-x-2 block">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                </svg>
                <span>
                    if lang == "ar" {
                        إضافة ورشة جديدة
                    } else {
                        Add New Workshop
                    }
                </span>
            </a>

            <!-- Workshops List -->
            <div class="bg-white rounded-2xl card-shadow overflow-hidden">
                <div class="p-4 border-b border-gray-100">
                    <h3 class="font-semibold text-slate-charcoal">
                        if lang == "ar" {
                            ورشاتي ({ fmt.Sprintf("%d", len(workshops)) })
                        } else {
                            My Workshops ({ fmt.Sprintf("%d", len(workshops)) })
                        }
                    </h3>
                </div>

                <div id="workshops-list">
                    if len(workshops) == 0 {
                        @EmptyWorkshopsState(lang, isRTL)
                    } else {
                        @WorkshopsListFixed(workshops, settings, lang, isRTL)
                    }
                </div>
            </div>

            <!-- Bottom Spacing -->
            <div class="h-6"></div>
        </main>

        <script>
            function getSuccessMessage(success) {
                const lang = document.documentElement.lang;
                const messages = {
                    'workshop_created': {
                        'ar': 'تم إنشاء الورشة كمسودة بنجاح',
                        'en': 'Workshop saved as draft successfully'
                    },
                    'workshop_published': {
                        'ar': 'تم نشر الورشة بنجاح',
                        'en': 'Workshop published successfully'
                    },
                    'workshop_updated': {
                        'ar': 'تم تحديث الورشة بنجاح',
                        'en': 'Workshop updated successfully'
                    },
                    'workshop_reordered': {
                        'ar': 'تم إعادة ترتيب الورش بنجاح',
                        'en': 'Workshops reordered successfully'
                    }
                };

                return messages[success] ? messages[success][lang] : (lang === 'ar' ? 'تم بنجاح' : 'Success');
            }

            // Global success message function
            window.getSuccessMessage = getSuccessMessage;
        </script>
    </body>
    </html>
}

templ EmptyWorkshopsState(lang string, isRTL bool) {
    <div class="empty-state p-8 m-4 rounded-xl text-center">
        <div class="w-16 h-16 bg-gulf-teal/10 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-gulf-teal" fill="currentColor" viewBox="0 0 24 24">
                <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
            </svg>
        </div>
        <h3 class="text-lg font-semibold text-slate-charcoal mb-2">
            if lang == "ar" {
                لم تقم بإنشاء أي ورش بعد
            } else {
                No workshops created yet
            }
        </h3>
        <p class="text-gray-500 text-sm mb-4">
            if lang == "ar" {
                ابدأ بإنشاء ورشتك الأولى وابدأ في تحقيق الدخل من وقتك
            } else {
                Start by creating your first workshop and begin monetizing your time
            }
        </p>
        <a href="/workshops/add" class="inline-flex items-center px-4 py-2 bg-gulf-teal text-white rounded-lg hover:bg-teal-600 transition-colors">
            <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
                <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
            </svg>
            if lang == "ar" {
                إنشاء ورشة
            } else {
                Create Workshop
            }
        </a>
    </div>
}

templ WorkshopsListFixed(workshops []models.Workshop, settings *models.ShopSettings, lang string, isRTL bool) {
    for i, workshop := range workshops {
        <div class="workshop-card border border-gray-200 rounded-xl p-4 mb-4 bg-white shadow-sm">
            <!-- Top Row: Reorder buttons and workshop main content -->
            <div class="flex items-start gap-3 mb-3">
                <!-- Reorder Buttons -->
                <div class="flex flex-col gap-1 pt-1">
                    if i > 0 {
                        <button
                            class="w-6 h-6 flex items-center justify-center rounded bg-gray-50 hover:bg-gray-100 transition-colors"
                            hx-post="/workshops/reorder"
                            hx-vals={ fmt.Sprintf(`{"workshop_id": "%s", "direction": "up"}`, workshop.ID.String()) }
                            hx-target="#workshops-list"
                            hx-swap="innerHTML"
                            title={ getReorderTooltip("up", lang) }
                        >
                            <svg class="w-3 h-3 text-gray-600" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M7 14l5-5 5 5z"/>
                            </svg>
                        </button>
                    }
                    if i < len(workshops)-1 {
                        <button
                            class="w-6 h-6 flex items-center justify-center rounded bg-gray-50 hover:bg-gray-100 transition-colors"
                            hx-post="/workshops/reorder"
                            hx-vals={ fmt.Sprintf(`{"workshop_id": "%s", "direction": "down"}`, workshop.ID.String()) }
                            hx-target="#workshops-list"
                            hx-swap="innerHTML"
                            title={ getReorderTooltip("down", lang) }
                        >
                            <svg class="w-3 h-3 text-gray-600" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M7 10l5 5 5-5z"/>
                            </svg>
                        </button>
                    }
                </div>

                <!-- Workshop Image (Square) -->
                <div class="w-16 h-16 bg-gradient-to-br from-gulf-teal/20 to-teal-200 rounded-lg flex items-center justify-center flex-shrink-0 overflow-hidden">
                    if func() bool {
                        // Check if there's a cover image or any image
                        for _, img := range workshop.Images {
                            if img.IsCover || len(workshop.Images) == 1 {
                                return true
                            }
                        }
                        return false
                    }() {
                        <img src={ func() string {
                            // Get cover image URL, or first image if no cover
                            for _, img := range workshop.Images {
                                if img.IsCover {
                                    return img.ImageURL
                                }
                            }
                            // If no cover, return first image
                            if len(workshop.Images) > 0 {
                                return workshop.Images[0].ImageURL
                            }
                            return ""
                        }() } alt={ func() string {
                            if lang == "ar" && workshop.TitleAr != "" {
                                return workshop.TitleAr
                            }
                            return workshop.Title
                        }() } class="w-full h-full object-cover rounded-lg"/>
                    } else {
                        <svg class="w-8 h-8 text-gulf-teal" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                        </svg>
                    }
                </div>

                <!-- Workshop Details -->
                <div class="flex-1 min-w-0">
                    <h3 class="font-semibold text-slate-charcoal text-base mb-1 truncate">
                        if lang == "ar" && workshop.TitleAr != "" {
                            { workshop.TitleAr }
                        } else {
                            { workshop.Title }
                        }
                    </h3>
                    
                    <div class="flex items-center gap-4 text-sm text-gray-600 mb-2">
                        <!-- Price -->
                        <span class="flex items-center gap-1">
                            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1.41 16.09V20h-2.67v-1.93c-1.71-.36-3.16-1.46-3.27-3.4h1.96c.1 1.05.82 1.87 2.65 1.87 1.96 0 2.4-.98 2.4-1.59 0-.83-.44-1.61-2.67-2.14-2.48-.6-4.18-1.62-4.18-3.67 0-1.72 1.39-2.84 3.11-3.21V4h2.67v1.95c1.86.45 2.79 1.86 2.85 3.39H14.3c-.05-1.11-.64-1.87-2.22-1.87-1.5 0-2.4.68-2.4 1.64 0 .84.65 1.39 2.67 1.91s4.18 1.39 4.18 3.91c-.01 1.83-1.38 2.83-3.12 3.16z"/>
                            </svg>
                            if workshop.IsFree {
                                if lang == "ar" {
                                    مجاني
                                } else {
                                    Free
                                }
                            } else {
                                { fmt.Sprintf("%.0f %s", workshop.Price, getCurrencySymbol(settings, lang)) }
                            }
                        </span>

                        <!-- Duration -->
                        if func() bool {
                            for _, session := range workshop.Sessions {
                                if session.Duration > 0 {
                                    return true
                                }
                            }
                            return false
                        }() {
                            <span class="flex items-center gap-1">
                                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"/>
                                    <path d="M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"/>
                                </svg>
                                { func() string {
                                    totalDuration := 0.0
                                    for _, session := range workshop.Sessions {
                                        totalDuration += session.Duration
                                    }
                                    totalMinutes := int(totalDuration * 60)
                                    if totalMinutes >= 60 {
                                        hours := totalMinutes / 60
                                        if lang == "ar" {
                                            return fmt.Sprintf("%d س", hours)
                                        }
                                        return fmt.Sprintf("%dh", hours)
                                    }
                                    if lang == "ar" {
                                        return fmt.Sprintf("%d د", totalMinutes)
                                    }
                                    return fmt.Sprintf("%d min", totalMinutes)
                                }() }
                            </span>
                        }
                    </div>
                </div>

                <!-- Active/Inactive Switch -->
                <div class="flex items-center flex-col gap-1">
                    <label class="relative inline-flex items-center cursor-pointer">
                        <input 
                            type="checkbox" 
                            class="sr-only peer" 
                            checked?={ workshop.IsActive }
                            hx-post="/workshops/toggle-status"
                            hx-vals={ fmt.Sprintf(`{"workshop_id": "%s"}`, workshop.ID.String()) }
                            hx-target="#workshops-list"
                            hx-swap="innerHTML"
                        />
                        <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-gulf-teal/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-gulf-teal"></div>
                    </label>
                    <span class={ fmt.Sprintf("text-xs text-center min-w-max %s", getToggleTextClass(isRTL)) }>
                        if workshop.IsActive {
                            if lang == "ar" {
                                نشط
                            } else {
                                Active
                            }
                        } else {
                            if lang == "ar" {
                                غير نشط
                            } else {
                                Inactive
                            }
                        }
                    </span>
                </div>
            </div>

            <!-- Bottom Row: Action Buttons -->
            <div class="flex justify-between items-center pt-3 border-t border-gray-100">
                <div class="flex gap-2">
                    <!-- Delete Button -->
                    <button 
                        class="px-3 py-1.5 text-sm text-red-600 hover:bg-red-50 rounded-lg transition-colors border border-red-200 hover:border-red-300"
                        hx-delete={ fmt.Sprintf("/workshops/delete/%s", workshop.ID.String()) }
                        hx-confirm={ getDeleteConfirmation(lang) }
                        hx-target="#workshops-list"
                        hx-swap="innerHTML"
                    >
                        if lang == "ar" {
                            حذف
                        } else {
                            Delete
                        }
                    </button>

                    <!-- Edit Button -->
                    <a 
                        href={ templ.SafeURL(fmt.Sprintf("/workshops/edit/%s", workshop.ID.String())) }
                        class="px-3 py-1.5 text-sm text-gulf-teal hover:bg-gulf-teal/10 rounded-lg transition-colors border border-gulf-teal/20 hover:border-gulf-teal/40"
                    >
                        if lang == "ar" {
                            تعديل
                        } else {
                            Edit
                        }
                    </a>
                </div>

                <!-- Publish Button -->
                if workshop.Status == "draft" {
                    <button 
                        class="px-4 py-1.5 text-sm bg-gulf-teal text-white hover:bg-teal-600 rounded-lg transition-colors"
                        hx-post="/workshops/publish"
                        hx-vals={ fmt.Sprintf(`{"workshop_id": "%s"}`, workshop.ID.String()) }
                        hx-target="#workshops-list"
                        hx-swap="innerHTML"
                    >
                        if lang == "ar" {
                            نشر
                        } else {
                            Publish
                        }
                    </button>
                } else {
                    <span class="px-4 py-1.5 text-sm text-green-600 font-medium">
                        if lang == "ar" {
                            منشور
                        } else {
                            Published
                        }
                    </span>
                }
            </div>
        </div>
    }
}

// Helper functions for workshop status and styling (same as before)
func getWorkshopStatusBadgeClass(isActive bool, status string) string {
    if status == "draft" {
        return "px-2 py-1 bg-yellow-100 text-yellow-700 text-xs rounded-full"
    }
    if isActive {
        return "px-2 py-1 bg-green-100 text-green-700 text-xs rounded-full"
    }
    return "px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full"
}

func getWorkshopStatusText(isActive bool, status string, lang string) string {
    if status == "draft" {
        if lang == "ar" {
            return "مسودة"
        }
        return "Draft"
    }
    if isActive {
        if lang == "ar" {
            return "نشط"
        }
        return "Active"
    }
    if lang == "ar" {
        return "غير نشط"
    }
    return "Inactive"
}

func getStatusButtonClass(isActive bool) string {
    if isActive {
        return "text-green-600 hover:bg-green-50"
    }
    return "text-gray-400 hover:bg-gray-50"
}

func getReorderTooltip(direction string, lang string) string {
    if lang == "ar" {
        if direction == "up" {
            return "تحريك للأعلى"
        }
        return "تحريك للأسفل"
    }
    if direction == "up" {
        return "Move up"
    }
    return "Move down"
}

func getToggleTooltip(isActive bool, lang string) string {
    if lang == "ar" {
        if isActive {
            return "إلغاء التفعيل"
        }
        return "تفعيل"
    }
    if isActive {
        return "Deactivate"
    }
    return "Activate"
}

func getEditTooltip(lang string) string {
    if lang == "ar" {
        return "تعديل الورشة"
    }
    return "Edit workshop"
}

func getDeleteConfirmation(lang string) string {
    if lang == "ar" {
        return "هل أنت متأكد من حذف هذه الورشة؟"
    }
    return "Are you sure you want to delete this workshop?"
}

func getToggleTextClass(isRTL bool) string {
    if isRTL {
        return "text-gray-500 font-cairo"
    }
    return "text-gray-500 font-inter"
}
