package templates

import (
    "fmt"
    "waqti/internal/models"
    "strings"
    "time"
)

templ EditWorkshopPage(creator *models.Creator, workshop *models.Workshop, sessions []models.WorkshopSession, lang string, isRTL bool) {
    <!DOCTYPE html>
    <html lang={ lang } dir={ getDirection(isRTL) }>
    <head>
        <meta charset="UTF-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
        <title>
            if lang == "ar" {
                تعديل الورشة - Waqti.me
            } else {
                Edit Workshop - Waqti.me
            }
        </title>
        <script src="https://cdn.tailwindcss.com"></script>
        <script src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
        <script src="https://unpkg.com/htmx.org@1.9.10"></script>
        <link rel="preconnect" href="https://fonts.googleapis.com"/>
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Cairo:wght@400;500;600;700&display=swap"/>
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"/>

        <script>
            tailwind.config = {
                theme: {
                    extend: {
                        colors: {
                            'gulf-teal': '#2DD4BF',
                            'ivory-sand': '#FEFCE8',
                            'slate-charcoal': '#1E293B'
                        },
                        fontFamily: {
                            'cairo': ['Cairo', 'sans-serif'],
                            'inter': ['Inter', 'sans-serif']
                        }
                    }
                }
            }
        </script>

        <style>
            .font-primary {
                font-family: { getFontFamily(isRTL) };
            }

            .gradient-bg {
                background: linear-gradient(135deg, #F0FDFA 0%, #FEFCE8 100%);
            }

            .card-shadow {
                box-shadow: 0 4px 20px rgba(45, 212, 191, 0.1);
            }

            .image-preview {
                position: relative;
                overflow: hidden;
                border-radius: 12px;
                aspect-ratio: 16/9;
            }

            .image-preview img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

            .cover-badge {
                background: linear-gradient(45deg, #2DD4BF, #06B6D4);
            }

            .session-card {
                background: linear-gradient(135deg, rgba(45, 212, 191, 0.05) 0%, rgba(255, 255, 255, 0.8) 100%);
                border: 1px solid rgba(45, 212, 191, 0.2);
            }

            input[type="file"] {
                display: none;
            }

            .upload-area {
                border: 2px dashed #2DD4BF;
                transition: all 0.3s ease;
            }

            .upload-area:hover {
                border-color: #06B6D4;
                background-color: rgba(45, 212, 191, 0.05);
            }

            .upload-area.dragover {
                border-color: #06B6D4;
                background-color: rgba(45, 212, 191, 0.1);
            }

            .delete-btn {
                position: absolute;
                top: 8px;
                right: 8px;
                background: rgba(239, 68, 68, 0.9);
                color: white;
                border: none;
                border-radius: 50%;
                width: 24px;
                height: 24px;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
                transition: all 0.3s ease;
            }

            .delete-btn:hover {
                background: rgba(239, 68, 68, 1);
                transform: scale(1.1);
            }
        </style>
    </head>
    <body class="gradient-bg min-h-screen font-primary">
        <!-- Data Container for Alpine.js -->
        <script type="application/json" id="workshop-data">
            {
                "name": "{ workshop.Name }",
                "description": "{ workshop.Description }",
                "price": { fmt.Sprintf("%.0f", workshop.Price) },
                "currency": "{ workshop.Currency }",
                "isFree": { fmt.Sprintf("%t", workshop.IsFree) },
                "status": "{ workshop.Status }",
                "sessions": [
                    if len(sessions) > 0 {
                        for i, session := range sessions {
                            {
                                "date": "{ session.SessionDate.Format("2006-01-02") }",
                                "time": "{ session.StartTime }",
                                "duration": { fmt.Sprintf("%.1f", session.Duration) }
                            }if i < len(sessions)-1 {,}
                        }
                    }
                ]
            }
        </script>
        <!-- Header -->
        <header class="bg-white/80 backdrop-blur-sm border-b border-gulf-teal/20 sticky top-0 z-50">
            <div class="max-w-md mx-auto px-4 py-4">
                <div class="flex items-center justify-between">
                    <div class={ getSpaceClass(isRTL) }>
                        <a href="/workshops/reorder" class="p-2 hover:bg-gray-100 rounded-full transition-colors">
                            <svg class="w-5 h-5 text-gray-600" fill="currentColor" viewBox="0 0 24 24">
                                if isRTL {
                                    <path d="M4 11H16.17L10.58 5.41L12 4L20 12L12 20L10.59 18.59L16.17 13H4V11Z"/>
                                } else {
                                    <path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.42-1.41L7.83 13H20v-2z"/>
                                }
                            </svg>
                        </a>
                        <h1 class="text-xl font-bold text-slate-charcoal">
                            if lang == "ar" {
                                تعديل الورشة
                            } else {
                                Edit Workshop
                            }
                        </h1>
                    </div>
                    <button
                        onclick="deleteWorkshop()"
                        class="text-red-500 text-sm font-medium hover:underline"
                        type="button"
                    >
                        if lang == "ar" {
                            حذف
                        } else {
                            Delete
                        }
                    </button>
                </div>
            </div>
        </header>

        <!-- Main Content -->
        <main class="max-w-md mx-auto px-4 py-6" id="workshop-container"
              data-name={ workshop.Name }
              data-description={ workshop.Description }
              data-price={ fmt.Sprintf("%.0f", workshop.Price) }
              data-currency={ workshop.Currency }
              data-status={ workshop.Status }
              data-is-free={ fmt.Sprintf("%t", workshop.IsFree) }
              data-max-students={ fmt.Sprintf("%d", workshop.MaxStudents) }
              data-sessions-count={ fmt.Sprintf("%d", len(sessions)) }
              data-workshop-id={ workshop.ID.String() }
        >
            <!-- Hidden session data elements -->
            for i, session := range sessions {
                <div style="display:none"
                     data-session-index={ fmt.Sprintf("%d", i) }
                     data-session-date={ session.SessionDate.Format("2006-01-02") }
                     data-session-time={ func() string {
                         // Extract just the time part from the time string
                         timeStr := session.StartTime
                         // If it contains 'T', it's a full timestamp, extract time part
                         if strings.Contains(timeStr, "T") {
                             // Parse the timestamp and extract just HH:MM
                             if t, err := time.Parse(time.RFC3339, timeStr); err == nil {
                                 return t.Format("15:04")
                             }
                         }
                         // If it's already in HH:MM:SS format, take first 5 chars
                         if len(timeStr) >= 5 && timeStr[2] == ':' {
                             return timeStr[:5]
                         }
                         return timeStr
                     }() }
                     data-session-duration={ fmt.Sprintf("%.1f", session.Duration) }
                     class="session-data"></div>
            }
            <form
                action={ templ.SafeURL(fmt.Sprintf("/workshops/update/%s", workshop.ID.String())) }
                method="POST"
                enctype="multipart/form-data"
                x-data="editWorkshopForm()"
                @submit.prevent="submitForm()"
                class="space-y-6"
            >
                <!-- Error/Success Messages -->
                <div x-data="{
                    errorMessage: new URLSearchParams(window.location.search).get('error'),
                    successMessage: new URLSearchParams(window.location.search).get('success')
                }" x-init="setTimeout(() => { errorMessage = ''; successMessage = '' }, 5000)">

                    <!-- Error Alert -->
                    <div
                        x-show="errorMessage"
                        x-transition
                        class="mb-4 p-4 bg-red-50 border border-red-200 rounded-xl"
                    >
                        <div class="flex items-center">
                            <svg class="w-5 h-5 text-red-500 mr-3" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"/>
                            </svg>
                            <span class="text-red-700 text-sm font-medium" x-text="getErrorMessage(errorMessage)"></span>
                        </div>
                    </div>

                    <!-- Success Alert -->
                    <div
                        x-show="successMessage"
                        x-transition
                        class="mb-4 p-4 bg-green-50 border border-green-200 rounded-xl"
                    >
                        <div class="flex items-center">
                            <svg class="w-5 h-5 text-green-500 mr-3" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                            </svg>
                            <span class="text-green-700 text-sm font-medium" x-text="getSuccessMessage(successMessage)"></span>
                        </div>
                    </div>
                </div>

                <!-- Basic Info Section -->
                <div class="bg-white rounded-2xl p-6 card-shadow">
                    <div class={ getSpaceClass(isRTL) + " mb-4" }>
                        <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                            <svg class="w-4 h-4 text-blue-600" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6z"/>
                            </svg>
                        </div>
                        <h2 class="text-lg font-semibold text-slate-charcoal">
                            if lang == "ar" {
                                المعلومات الأساسية
                            } else {
                                Basic Information
                            }
                        </h2>
                    </div>

                    <!-- Workshop Name -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">
                            if lang == "ar" {
                                اسم الورشة *
                            } else {
                                Workshop Name *
                            }
                        </label>
                        <input
                            type="text"
                            name="name"
                            x-model="form.name"
                            placeholder={ getWorkshopNamePlaceholder(lang) }
                            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-gulf-teal focus:border-transparent"
                            required
                        />
                    </div>

                    <!-- Description -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">
                            if lang == "ar" {
                                الوصف
                            } else {
                                Description
                            }
                        </label>
                        <textarea
                            name="description"
                            x-model="form.description"
                            placeholder={ getDescriptionPlaceholder(lang) }
                            rows="4"
                            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-gulf-teal focus:border-transparent resize-none"
                        ></textarea>
                    </div>
                </div>

                <!-- Pricing Section -->
                <div class="bg-white rounded-2xl p-6 card-shadow">
                    <div class={ getSpaceClass(isRTL) + " mb-4" }>
                        <div class="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                            <svg class="w-4 h-4 text-green-600" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1.41 16.09V20h-2.67v-1.93c-1.71-.36-3.16-1.46-3.27-3.4h1.96c.1 1.05.82 1.87 2.65 1.87 1.96 0 2.4-.98 2.4-1.59 0-.83-.44-1.61-2.67-2.14-2.48-.6-4.18-1.62-4.18-3.67 0-1.72 1.39-2.84 3.11-3.21V4h2.67v1.95c1.86.45 2.79 1.86 2.85 3.39H14.3c-.05-1.11-.64-1.87-2.22-1.87-1.5 0-2.4.68-2.4 1.64 0 .84.65 1.39 2.67 1.91s4.18 1.39 4.18 3.91c-.01 1.83-1.38 2.83-3.12 3.16z"/>
                            </svg>
                        </div>
                        <h2 class="text-lg font-semibold text-slate-charcoal">
                            if lang == "ar" {
                                التسعير
                            } else {
                                Pricing
                            }
                        </h2>
                    </div>

                    <div class={ getPricingLayout(isRTL) }>
                        <!-- Price Input -->
                        <div class="flex-1">
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                if lang == "ar" {
                                    السعر *
                                } else {
                                    Price *
                                }
                            </label>
                            <input
                                type="number"
                                name="price"
                                x-model="form.price"
                                placeholder="0"
                                min="0"
                                step="0.01"
                                :disabled="form.isFree"
                                class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-gulf-teal focus:border-transparent disabled:bg-gray-100"
                                required
                            />
                        </div>

                        <!-- Currency Selector -->
                        <div class="w-24">
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                if lang == "ar" {
                                    العملة
                                } else {
                                    Currency
                                }
                            </label>
                            <select
                                name="currency"
                                x-model="form.currency"
                                class="w-full px-3 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-gulf-teal focus:border-transparent"
                            >
                                <option value="KWD">KWD</option>
                                <option value="USD">USD</option>
                                <option value="EUR">EUR</option>
                            </select>
                        </div>
                    </div>

                    <!-- Free Workshop Toggle -->
                    <div class={ "mt-4 flex items-center " + getSpaceClass(isRTL) }>
                        <input
                            type="checkbox"
                            name="is_free"
                            x-model="form.isFree"
                            @change="if(form.isFree) form.price = 0"
                            id="free-workshop"
                            class="w-4 h-4 text-gulf-teal border-gray-300 rounded focus:ring-gulf-teal"
                        />
                        <label for="free-workshop" class="text-sm text-gray-700">
                            if lang == "ar" {
                                هذه ورشة مجانية
                            } else {
                                This is a free workshop
                            }
                        </label>
                    </div>
                </div>

                <!-- Capacity Section -->
                <div class="bg-white rounded-2xl p-6 card-shadow">
                    <div class={ getSpaceClass(isRTL) + " mb-4" }>
                        <div class="w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center">
                            <svg class="w-4 h-4 text-yellow-600" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M16 4c0-1.11.89-2 2-2s2 .89 2 2-.89 2-2 2-2-.89-2-2zm4 18v-6h2.5l-2.54-7.63A1.5 1.5 0 0018.54 7H16c-.8 0-1.54.37-2 1l-3.72 5.2c-.64.89-.76 2.07-.35 3.08L12.5 20h3.5v2h4zM12.5 11.5c.83 0 1.5-.67 1.5-1.5s-.67-1.5-1.5-1.5S11 9.17 11 10s.67 1.5 1.5 1.5zM5.5 6c1.11 0 2-.89 2-2s-.89-2-2-2-2 .89-2 2 .89 2 2 2zm2 16v-6H10l-2.54-7.63A1.5 1.5 0 006.04 7H3.5c-.8 0-1.54.37-2 1L-2.22 13.2c-.64.89-.76 2.07-.35 3.08L0 20h3.5v2h4z"/>
                            </svg>
                        </div>
                        <h2 class="text-lg font-semibold text-slate-charcoal">
                            if lang == "ar" {
                                السعة
                            } else {
                                Capacity
                            }
                        </h2>
                    </div>

                    <!-- Max Students Field -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">
                            if lang == "ar" {
                                العدد الأقصى للطلاب
                            } else {
                                Maximum Students
                            }
                        </label>
                        <input
                            type="number"
                            name="max_students"
                            x-model="form.maxStudents"
                            placeholder="25"
                            min="0"
                            :disabled="form.isUnlimited"
                            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-gulf-teal focus:border-transparent disabled:bg-gray-100"
                        />
                        <p class="text-xs text-gray-500 mt-1">
                            if lang == "ar" {
                                اتركه فارغاً أو صفر للمقاعد غير المحدودة
                            } else {
                                Leave empty or 0 for unlimited seats
                            }
                        </p>
                    </div>

                    <!-- Unlimited Toggle -->
                    <div class={ "flex items-center " + getSpaceClass(isRTL) }>
                        <input
                            type="checkbox"
                            x-model="form.isUnlimited"
                            @change="if(form.isUnlimited) form.maxStudents = 0"
                            id="unlimited-seats"
                            class="w-4 h-4 text-gulf-teal border-gray-300 rounded focus:ring-gulf-teal"
                        />
                        <label for="unlimited-seats" class="text-sm text-gray-700">
                            if lang == "ar" {
                                مقاعد غير محدودة
                            } else {
                                Unlimited seats
                            }
                        </label>
                    </div>
                </div>

                <!-- Schedule Section -->
                <div class="bg-white rounded-2xl p-6 card-shadow">
                    <div class="flex items-center justify-between mb-4">
                        <div class={ getSpaceClass(isRTL) }>
                            <div class="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center">
                                <svg class="w-4 h-4 text-purple-600" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/>
                                </svg>
                            </div>
                            <h2 class="text-lg font-semibold text-slate-charcoal">
                                if lang == "ar" {
                                    الجدولة
                                } else {
                                    Schedule
                                }
                            </h2>
                        </div>
                    </div>

                    <!-- Workshop Type Selector -->
                    <div class="mb-6">
                        <label class="block text-sm font-medium text-gray-700 mb-3">
                            if lang == "ar" {
                                نوع الورشة
                            } else {
                                Workshop Type
                            }
                        </label>
                        <div class="grid grid-cols-2 gap-3">
                            <div>
                                <input 
                                    type="radio" 
                                    id="single-day" 
                                    name="workshop_type" 
                                    value="single" 
                                    x-model="form.workshopType"
                                    class="sr-only peer"
                                />
                                <label for="single-day" class="flex flex-col items-center p-3 border-2 border-gray-200 rounded-xl cursor-pointer peer-checked:border-gulf-teal peer-checked:bg-gulf-teal/5 hover:border-gulf-teal/50 transition-colors">
                                    <svg class="w-5 h-5 text-gray-500 peer-checked:text-gulf-teal mb-1" fill="currentColor" viewBox="0 0 24 24">
                                        <path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/>
                                    </svg>
                                    <span class="text-xs font-medium text-gray-700">
                                        if lang == "ar" {
                                            يوم واحد
                                        } else {
                                            Single Day
                                        }
                                    </span>
                                </label>
                            </div>
                            <div>
                                <input 
                                    type="radio" 
                                    id="multi-consecutive" 
                                    name="workshop_type" 
                                    value="consecutive" 
                                    x-model="form.workshopType"
                                    class="sr-only peer"
                                />
                                <label for="multi-consecutive" class="flex flex-col items-center p-3 border-2 border-gray-200 rounded-xl cursor-pointer peer-checked:border-gulf-teal peer-checked:bg-gulf-teal/5 hover:border-gulf-teal/50 transition-colors">
                                    <svg class="w-5 h-5 text-gray-500 peer-checked:text-gulf-teal mb-1" fill="currentColor" viewBox="0 0 24 24">
                                        <path d="M9 11H7v6h2v-6zm4 0h-2v6h2v-6zm4 0h-2v6h2v-6zm2-7h-1V2h-2v2H8V2H6v2H5c-1.1 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v10z"/>
                                    </svg>
                                    <span class="text-xs font-medium text-gray-700">
                                        if lang == "ar" {
                                            أيام متتالية
                                        } else {
                                            Consecutive
                                        }
                                    </span>
                                </label>
                            </div>
                            <div>
                                <input 
                                    type="radio" 
                                    id="multi-spread" 
                                    name="workshop_type" 
                                    value="spread" 
                                    x-model="form.workshopType"
                                    class="sr-only peer"
                                />
                                <label for="multi-spread" class="flex flex-col items-center p-3 border-2 border-gray-200 rounded-xl cursor-pointer peer-checked:border-gulf-teal peer-checked:bg-gulf-teal/5 hover:border-gulf-teal/50 transition-colors">
                                    <svg class="w-5 h-5 text-gray-500 peer-checked:text-gulf-teal mb-1" fill="currentColor" viewBox="0 0 24 24">
                                        <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2zm0 2.19L9.19 9.83l-5.83.81 4.28 4.15L6.46 20.2L12 17.77l5.54 2.43-1.18-5.41 4.28-4.15-5.83-.81L12 4.19z"/>
                                    </svg>
                                    <span class="text-xs font-medium text-gray-700">
                                        if lang == "ar" {
                                            أيام منتشرة
                                        } else {
                                            Spread Out
                                        }
                                    </span>
                                </label>
                            </div>
                            <div>
                                <input 
                                    type="radio" 
                                    id="custom-schedule" 
                                    name="workshop_type" 
                                    value="custom" 
                                    x-model="form.workshopType"
                                    class="sr-only peer"
                                />
                                <label for="custom-schedule" class="flex flex-col items-center p-3 border-2 border-gray-200 rounded-xl cursor-pointer peer-checked:border-gulf-teal peer-checked:bg-gulf-teal/5 hover:border-gulf-teal/50 transition-colors">
                                    <svg class="w-5 h-5 text-gray-500 peer-checked:text-gulf-teal mb-1" fill="currentColor" viewBox="0 0 24 24">
                                        <path d="M22.7 19l-9.1-9.1c.9-2.3.4-5-1.5-6.9-2-2-5-2.4-7.4-1.3L9 6 6 9 1.6 4.7C.4 7.1.9 10.1 2.9 12.1c1.9 1.9 4.6 2.4 6.9 1.5l9.1 9.1c.4.4 1 .4 1.4 0l2.3-2.3c.5-.4.5-1.1.1-1.4z"/>
                                    </svg>
                                    <span class="text-xs font-medium text-gray-700">
                                        if lang == "ar" {
                                            مخصص
                                        } else {
                                            Custom
                                        }
                                    </span>
                                </label>
                            </div>
                        </div>
                    </div>

                    <!-- Bulk Actions for Custom Mode -->
                    <div x-show="form.workshopType === 'custom'" class="mb-6">
                        <div class="flex items-center justify-between mb-3">
                            <label class="text-sm font-medium text-gray-700">
                                if lang == "ar" {
                                    إجراءات مجمعة
                                } else {
                                    Bulk Actions
                                }
                            </label>
                        </div>
                        <div class="flex flex-wrap gap-2">
                            <button 
                                type="button"
                                @click="duplicateLastSession()"
                                x-show="form.sessions.length > 0"
                                class="px-3 py-1.5 text-xs bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
                            >
                                if lang == "ar" {
                                    تكرار آخر جلسة
                                } else {
                                    Duplicate Last
                                }
                            </button>
                            <button 
                                type="button"
                                @click="clearAllSessions()"
                                x-show="form.sessions.length > 1"
                                class="px-3 py-1.5 text-xs bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition-colors"
                            >
                                if lang == "ar" {
                                    مسح الكل
                                } else {
                                    Clear All
                                }
                            </button>
                        </div>
                    </div>

                    <!-- Sessions List -->
                    <div class="space-y-3">
                        <template x-for="(session, index) in form.sessions" :key="index">
                            <div class="session-card p-4 rounded-xl">
                                <div class="flex items-center justify-between mb-3">
                                    <span class="text-sm font-medium text-gray-700">
                                        if lang == "ar" {
                                            الجلسة
                                        } else {
                                            Session
                                        }
                                        <span x-text="index + 1"></span>
                                    </span>
                                    <button
                                        x-show="form.sessions.length > 0"
                                        @click="removeSession(index)"
                                        type="button"
                                        class="text-red-500 hover:text-red-700 p-1"
                                    >
                                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                                            <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                                        </svg>
                                    </button>
                                </div>

                                <div class="grid grid-cols-2 gap-3">
                                    <div>
                                        <label class="block text-xs font-medium text-gray-600 mb-1">
                                            if lang == "ar" {
                                                التاريخ
                                            } else {
                                                Date
                                            }
                                        </label>
                                        <input
                                            type="date"
                                            x-model="session.date"
                                            :name="'session_date_' + index"
                                            :min="new Date().toISOString().split('T')[0]"
                                            class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-gulf-teal focus:border-transparent"
                                            required
                                        />
                                    </div>
                                    <div>
                                        <label class="block text-xs font-medium text-gray-600 mb-1">
                                            if lang == "ar" {
                                                الوقت
                                            } else {
                                                Time
                                            }
                                        </label>
                                        <input
                                            type="time"
                                            x-model="session.time"
                                            :name="'session_time_' + index"
                                            class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-gulf-teal focus:border-transparent"
                                            required
                                        />
                                    </div>
                                </div>

                                <div class="mt-3">
                                    <label class="block text-xs font-medium text-gray-600 mb-1">
                                        if lang == "ar" {
                                            المدة (ساعات)
                                        } else {
                                            Duration (hours)
                                        }
                                    </label>
                                    <input
                                        type="number"
                                        x-model="session.duration"
                                        :name="'session_duration_' + index"
                                        placeholder="2"
                                        min="0.5"
                                        step="0.5"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-gulf-teal focus:border-transparent"
                                        required
                                    />
                                </div>
                            </div>
                        </template>
                    </div>

                    <!-- Add Session Button -->
                    <button
                        @click="addSession()"
                        type="button"
                        class="w-full mt-4 py-3 border-2 border-dashed border-gulf-teal text-gulf-teal rounded-xl hover:bg-gulf-teal/5 transition-colors flex items-center justify-center space-x-2"
                    >
                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                        </svg>
                        <span class="font-medium">
                            if lang == "ar" {
                                إضافة جلسة أخرى
                            } else {
                                Add Another Session
                            }
                        </span>
                    </button>
                </div>

                <!-- Images Section -->
                <div class="bg-white rounded-2xl p-6 card-shadow">
                    <div class="flex items-center space-x-2 mb-4">
                        <div class="w-8 h-8 bg-orange-100 rounded-lg flex items-center justify-center">
                            <svg class="w-4 h-4 text-orange-600" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z"/>
                            </svg>
                        </div>
                        <h2 class="text-lg font-semibold text-slate-charcoal">
                            <span x-text="lang === 'ar' ? 'الصور' : 'Images'"></span>
                        </h2>
                        <span class="text-xs text-gray-500">(<span x-text="form.images.length"></span>/3)</span>
                    </div>

                    <!-- Upload Area -->
                    <div
                        x-show="form.images.length < 3"
                        @click="$refs.fileInput.click()"
                        @dragover.prevent="$event.target.classList.add('dragover')"
                        @dragleave.prevent="$event.target.classList.remove('dragover')"
                        @drop.prevent="handleFileDrop($event)"
                        class="upload-area p-6 rounded-xl text-center cursor-pointer mb-4"
                    >
                        <div x-show="!form.uploading">
                            <svg class="w-12 h-12 text-gulf-teal mx-auto mb-3" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6zm4 18H6V4h7v5h5v11z"/>
                            </svg>
                            <p class="text-gulf-teal font-medium mb-1" x-text="lang === 'ar' ? 'انقر للتحميل أو اسحب الصور هنا' : 'Click to upload or drag images here'"></p>
                            <p class="text-xs text-gray-500" x-text="lang === 'ar' ? 'حد أقصى 3 صور، 2 ميجابايت لكل صورة' : 'Maximum 3 images, 2MB each'"></p>
                        </div>

                        <!-- Upload Progress -->
                        <div x-show="form.uploading" class="flex flex-col items-center">
                            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-gulf-teal mb-2"></div>
                            <p class="text-gulf-teal font-medium" x-text="lang === 'ar' ? 'جاري الرفع...' : 'Uploading...'"></p>
                        </div>

                        <input
                            type="file"
                            x-ref="fileInput"
                            @change="handleFileSelect($event)"
                            accept="image/*"
                            multiple
                        />
                    </div>

                    <!-- Image Previews -->
                    <div x-show="form.images.length > 0" class="grid grid-cols-1 gap-3">
                        <template x-for="(image, index) in form.images" :key="index">
                            <div class="image-preview relative">
                                <img :src="image.url" :alt="'Preview ' + (index + 1)" class="rounded-xl"/>

                                <!-- Cover Badge -->
                                <div
                                    x-show="form.coverImageIndex === index"
                                    class="absolute top-2 left-2 cover-badge text-white px-2 py-1 rounded-full text-xs font-medium"
                                    x-text="lang === 'ar' ? 'الغلاف' : 'Cover'"
                                ></div>

                                <!-- Actions -->
                                <div class="absolute top-2 right-2 flex space-x-1">
                                    <button
                                        @click="setCoverImage(index)"
                                        :class="form.coverImageIndex === index ? 'bg-white/30' : 'bg-black/30 hover:bg-black/50'"
                                        type="button"
                                        class="p-2 rounded-full text-white transition-colors"
                                        :title="lang === 'ar' ? 'تعيين كغلاف' : 'Set as cover'"
                                    >
                                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                                            <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                                        </svg>
                                    </button>
                                    <button
                                        @click="removeImage(index)"
                                        type="button"
                                        class="p-2 bg-red-500/80 hover:bg-red-600 rounded-full text-white transition-colors"
                                        :title="lang === 'ar' ? 'حذف الصورة' : 'Remove image'"
                                    >
                                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                                            <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        </template>
                    </div>

                    <!-- Hidden fields for form submission -->
                    <template x-for="(image, index) in form.images" :key="index">
                        <input type="hidden" :name="'image_urls[]'" :value="image.url" />
                    </template>
                    <input type="hidden" name="cover_image_index" :value="form.coverImageIndex" />
                </div>

                <!-- Save Buttons -->
                <div class={ getSaveButtonLayout(isRTL) }>
                    <button
                        type="button"
                        @click="saveDraft()"
                        class="flex-1 py-4 bg-gray-100 text-gray-700 rounded-xl font-medium hover:bg-gray-200 transition-colors"
                    >
                        if lang == "ar" {
                            حفظ كمسودة
                        } else {
                            Save as Draft
                        }
                    </button>
                    <button
                        type="submit"
                        :disabled="!isFormValid()"
                        class="flex-1 py-4 bg-gulf-teal text-white rounded-xl font-medium hover:bg-teal-600 transition-colors disabled:bg-gray-300 disabled:cursor-not-allowed"
                    >
                        if lang == "ar" {
                            حفظ التغييرات
                        } else {
                            Save Changes
                        }
                    </button>
                </div>

                <!-- Bottom Spacing -->
                <div class="h-6"></div>
            </form>
        </main>

        <script>
        // Your existing editWorkshopForm function stays exactly the same
        function editWorkshopForm() {
            return {
                form: {
                    name: '',
                    description: '',
                    price: 0,
                    currency: 'KWD',
                    isFree: false,
                    maxStudents: 0,
                    isUnlimited: true,
                    status: 'draft',
                    workshopType: 'custom',
                    sessions: [],
                    images: [],
                    coverImageIndex: 0,
                    workshopId: '',
                    uploading: false
                },
                lang: document.documentElement.lang,

                init() {
                    // Load data from data attributes on the main container
                    const container = document.getElementById('workshop-container');
                    if (container) {
                        this.form.name = container.dataset.name || '';
                        this.form.description = container.dataset.description || '';
                        this.form.price = parseFloat(container.dataset.price) || 0;
                        this.form.currency = container.dataset.currency || 'KWD';
                        this.form.isFree = container.dataset.isFree === 'true';
                        this.form.maxStudents = parseInt(container.dataset.maxStudents) || 0;
                        this.form.isUnlimited = this.form.maxStudents === 0;
                        this.form.status = container.dataset.status || 'draft';
                        this.form.workshopId = container.dataset.workshopId || '';

                        // Load sessions data from hidden session elements
                        const sessionElements = document.querySelectorAll('.session-data');
                        this.form.sessions = [];

                        sessionElements.forEach(element => {
                            const date = element.dataset.sessionDate;
                            const time = element.dataset.sessionTime;
                            const duration = parseFloat(element.dataset.sessionDuration);

                            if (date && time && duration) {
                                this.form.sessions.push({
                                    date: date,
                                    time: time,
                                    duration: duration
                                });
                            }
                        });

                        // Load existing workshop images
                        this.loadExistingImages();
                    }

                    // Set workshop type based on existing sessions
                    this.detectWorkshopType();
                },

                detectWorkshopType() {
                    if (this.form.sessions.length <= 1) {
                        this.form.workshopType = 'single';
                    } else {
                        // Check if sessions are consecutive
                        const sortedSessions = [...this.form.sessions].sort((a, b) => new Date(a.date) - new Date(b.date));
                        let isConsecutive = true;
                        
                        for (let i = 1; i < sortedSessions.length; i++) {
                            const prevDate = new Date(sortedSessions[i-1].date);
                            const currDate = new Date(sortedSessions[i].date);
                            const dayDiff = (currDate - prevDate) / (1000 * 60 * 60 * 24);
                            
                            if (dayDiff !== 1) {
                                isConsecutive = false;
                                break;
                            }
                        }
                        
                        this.form.workshopType = isConsecutive ? 'consecutive' : 'custom';
                    }
                },

                duplicateLastSession() {
                    if (this.form.sessions.length > 0) {
                        const lastSession = this.form.sessions[this.form.sessions.length - 1];
                        const duplicatedSession = {
                            date: '',
                            time: lastSession.time,
                            duration: lastSession.duration
                        };
                        this.form.sessions.push(duplicatedSession);
                    }
                },

                clearAllSessions() {
                    if (confirm('Are you sure you want to clear all sessions?')) {
                        this.form.sessions = [];
                    }
                },

                async loadExistingImages() {
                    try {
                        const response = await fetch(`/api/workshops/${this.form.workshopId}/images`);
                        if (response.ok) {
                            const result = await response.json();
                            if (result.success && result.images) {
                                this.form.images = result.images.map(img => ({
                                    url: img.image_url,
                                    uploaded: true,
                                    existing: true
                                }));

                                const coverImage = result.images.find(img => img.is_cover);
                                if (coverImage) {
                                    this.form.coverImageIndex = result.images.indexOf(coverImage);
                                }
                            }
                        }
                    } catch (error) {
                        console.error('Error loading existing images:', error);
                    }
                },

                addSession() {
                    this.form.sessions.push({
                        date: '',
                        time: '',
                        duration: 2
                    });
                },

                removeSession(index) {
                    this.form.sessions.splice(index, 1);
                },

                async handleFileSelect(event) {
                    const files = Array.from(event.target.files);
                    await this.processFiles(files);
                    event.target.value = '';
                },

                async handleFileDrop(event) {
                    event.target.classList.remove('dragover');
                    const files = Array.from(event.dataTransfer.files);
                    await this.processFiles(files);
                },

                async processFiles(files) {
                    const remainingSlots = 3 - this.form.images.length;
                    const filesToProcess = files.slice(0, remainingSlots);

                    const validFiles = filesToProcess.filter(file => {
                        const isValidType = file.type.startsWith('image/');
                        const isValidSize = file.size <= 2 * 1024 * 1024;

                        if (!isValidType) {
                            this.showError(`File "${file.name}" is not an image.`);
                            return false;
                        }

                        if (!isValidSize) {
                            this.showError(`File "${file.name}" exceeds 2MB limit.`);
                            return false;
                        }

                        return true;
                    });

                    if (validFiles.length === 0) {
                        return;
                    }

                    this.form.uploading = true;

                    try {
                        const formData = new FormData();
                        validFiles.forEach(file => {
                            formData.append('images[]', file);
                        });

                        const response = await fetch('/api/upload/images', {
                            method: 'POST',
                            body: formData
                        });

                        const result = await response.json();

                        if (result.success) {
                            result.images.forEach(imageUrl => {
                                this.form.images.push({
                                    url: imageUrl,
                                    uploaded: true
                                });
                            });

                            if (this.form.images.length === result.images.length) {
                                this.form.coverImageIndex = 0;
                            }

                            this.showSuccess(result.message);
                        } else {
                            this.showError(result.error || 'Upload failed');
                        }
                    } catch (error) {
                        console.error('Upload error:', error);
                        this.showError('Network error during upload');
                    } finally {
                        this.form.uploading = false;
                    }
                },

                async removeImage(index) {
                    const image = this.form.images[index];

                    if (image.uploaded && image.url && !image.existing) {
                        try {
                            const formData = new FormData();
                            formData.append('image_path', image.url);

                            await fetch('/api/upload/delete', {
                                method: 'DELETE',
                                body: formData
                            });
                        } catch (error) {
                            console.error('Error deleting image:', error);
                        }
                    }

                    this.form.images.splice(index, 1);

                    if (this.form.coverImageIndex >= this.form.images.length) {
                        this.form.coverImageIndex = Math.max(0, this.form.images.length - 1);
                    }
                },

                setCoverImage(index) {
                    this.form.coverImageIndex = index;
                },

                isFormValid() {
                    return this.form.name.trim() !== '' &&
                           (!this.form.sessions.length ||
                            this.form.sessions.every(session =>
                                session.date && session.time && session.duration > 0
                            ));
                },

                saveDraft() {
                    this.submitFormWithStatus('draft');
                },

                submitForm() {
                    if (!this.isFormValid()) {
                        this.showError('Please fill in all required fields.');
                        return;
                    }
                    this.submitFormWithStatus('published');
                },

                submitFormWithStatus(status) {
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = `/workshops/update/${this.form.workshopId}`;

                    this.appendFormField(form, 'name', this.form.name);
                    this.appendFormField(form, 'description', this.form.description);
                    this.appendFormField(form, 'price', this.form.price);
                    this.appendFormField(form, 'currency', this.form.currency);
                    this.appendFormField(form, 'is_free', this.form.isFree);
                    this.appendFormField(form, 'max_students', this.form.isUnlimited ? 0 : this.form.maxStudents);
                    this.appendFormField(form, 'workshop_type', this.form.workshopType);
                    this.appendFormField(form, 'status', status);

                    this.form.sessions.forEach((session, index) => {
                        this.appendFormField(form, `session_date_${index}`, session.date);
                        this.appendFormField(form, `session_time_${index}`, session.time);
                        this.appendFormField(form, `session_duration_${index}`, session.duration);
                    });

                    this.form.images.forEach((image, index) => {
                        this.appendFormField(form, 'image_urls[]', image.url);
                    });
                    this.appendFormField(form, 'cover_image_index', this.form.coverImageIndex);

                    document.body.appendChild(form);
                    form.submit();
                },

                appendFormField(form, name, value) {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = name;
                    input.value = value;
                    form.appendChild(input);
                },

                showError(message) {
                    this.showNotification(message, 'error');
                },

                showSuccess(message) {
                    this.showNotification(message, 'success');
                },

                showNotification(message, type) {
                    const notification = document.createElement('div');
                    const bgColor = type === 'error' ? 'bg-red-500' : 'bg-green-500';

                    notification.className = `fixed top-4 right-4 ${bgColor} text-white px-6 py-3 rounded-lg shadow-lg z-50 transform transition-all duration-300`;
                    notification.style.transform = 'translateY(-100px)';
                    notification.innerHTML = `
                        <div class="flex items-center space-x-2">
                            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                                ${type === 'error'
                                    ? '<path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"/>'
                                    : '<path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>'
                                }
                            </svg>
                            <span>${message}</span>
                        </div>
                    `;

                    document.body.appendChild(notification);

                    setTimeout(() => {
                        notification.style.transform = 'translateY(0)';
                    }, 100);

                    setTimeout(() => {
                        notification.style.transform = 'translateY(-100px)';
                        setTimeout(() => {
                            if (notification.parentElement) {
                                notification.parentElement.removeChild(notification);
                            }
                        }, 300);
                    }, 3000);
                }
            }
        }

        // VANILLA JS DELETE FUNCTION (the one that worked!)
        function deleteWorkshop() {
            console.log('=== VANILLA JS DELETE ===');

            // Get workshop ID from container
            const container = document.getElementById('workshop-container');
            const workshopId = container ? container.getAttribute('data-workshop-id') : null;

            console.log('Container found:', !!container);
            console.log('Workshop ID:', workshopId);

            if (!workshopId) {
                alert('ERROR: Workshop ID not found!');
                return;
            }

            // Get confirmation text
            const lang = document.documentElement.lang;
            const confirmText = lang === 'ar'
                ? 'هل أنت متأكد من حذف هذه الورشة؟ لا يمكن التراجع عن هذا الإجراء.'
                : 'Are you sure you want to delete this workshop? This action cannot be undone.';

            if (!confirm(confirmText)) {
                console.log('User cancelled deletion');
                return;
            }

            console.log('Making DELETE request to:', `/workshops/delete/${workshopId}`);

            // Make the DELETE request (same working code as before)
            fetch(`/workshops/delete/${workshopId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => {
                console.log('Response status:', response.status);
                console.log('Response ok:', response.ok);
                return response.text();
            })
            .then(data => {
                console.log('Response data:', data);

                if (data.includes('successfully') || data.includes('Workshop deleted')) {
                    const successMsg = lang === 'ar' ? 'تم حذف الورشة بنجاح' : 'Workshop deleted successfully';
                    alert(successMsg);
                    console.log('Redirecting to /workshops/reorder');
                    window.location.href = '/workshops/reorder?success=workshop_deleted';
                } else {
                    const errorMsg = lang === 'ar' ? 'فشل في حذف الورشة' : 'Failed to delete workshop';
                    alert(errorMsg + ': ' + data);
                }
            })
            .catch(error => {
                console.error('Fetch error:', error);
                const errorMsg = lang === 'ar' ? 'حدث خطأ أثناء الحذف' : 'Error occurred while deleting';
                alert(errorMsg + ': ' + error.message);
            });
        }

        // Keep your existing global functions
        function getErrorMessage(error) {
            const lang = document.documentElement.lang;
            const messages = {
                'name_required': {
                    'ar': 'اسم الورشة مطلوب',
                    'en': 'Workshop name is required'
                },
                'invalid_price': {
                    'ar': 'السعر غير صحيح',
                    'en': 'Invalid price'
                },
                'invalid_sessions': {
                    'ar': 'بيانات الجلسات غير صحيحة',
                    'en': 'Invalid session data'
                },
                'update_failed': {
                    'ar': 'فشل في تحديث الورشة',
                    'en': 'Failed to update workshop'
                },
                'workshop_not_found': {
                    'ar': 'الورشة غير موجودة',
                    'en': 'Workshop not found'
                }
            };

            return messages[error] ? messages[error][lang] : (lang === 'ar' ? 'حدث خطأ' : 'An error occurred');
        }

        function getSuccessMessage(success) {
            const lang = document.documentElement.lang;
            const messages = {
                'workshop_updated': {
                    'ar': 'تم تحديث الورشة بنجاح',
                    'en': 'Workshop updated successfully'
                },
                'draft_saved': {
                    'ar': 'تم حفظ المسودة بنجاح',
                    'en': 'Draft saved successfully'
                },
                'workshop_published': {
                    'ar': 'تم نشر الورشة بنجاح',
                    'en': 'Workshop published successfully'
                }
            };

            return messages[success] ? messages[success][lang] : (lang === 'ar' ? 'تم بنجاح' : 'Success');
        }

        function getDeleteConfirmText() {
            const lang = document.documentElement.lang;
            if (lang === 'ar') {
                return 'هل أنت متأكد من حذف هذه الورشة؟ لا يمكن التراجع عن هذا الإجراء.';
            }
            return 'Are you sure you want to delete this workshop? This action cannot be undone.';
        }

        function confirmDelete() {
            return confirm(getDeleteConfirmText());
        }

        // Make functions globally available
        window.getErrorMessage = getErrorMessage;
        window.getSuccessMessage = getSuccessMessage;
        window.getDeleteConfirmText = getDeleteConfirmText;
        window.confirmDelete = confirmDelete;
        window.deleteWorkshop = deleteWorkshop; // Add the delete function

        console.log('Workshop edit script with vanilla JS delete loaded successfully');
        </script>
    </body>
    </html>
}
