package templates

import (
    "waqti/internal/models"
    "fmt"
)

// Helper function to determine dropdown menu style based on RTL status
func dropdownMenuStyle(isRTL bool) string {
    if isRTL {
        return "left: 0; right: auto; transform: translateX(0);"
    }
    return "right: 0; left: auto; transform: translateX(0);"
}

templ DashboardPageWithURLSettings(creator *models.Creator, workshops []models.Workshop, stats models.DashboardStats, pendingOrdersCount int, urlSettings *models.URLSettings, shopSettings *models.ShopSettings, lang string, isRTL bool) {
    <!DOCTYPE html>
    <html lang={ lang } dir={ getDirection(isRTL) }>
    <head>
        <meta charset="UTF-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
        <title>
            if lang == "ar" {
                لوحة التحكم - Waqti.me
            } else {
                Dashboard - Waqti.me
            }
        </title>
        <script src="https://cdn.tailwindcss.com"></script>
        <script src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
        <script src="https://unpkg.com/htmx.org@1.9.10"></script>
        <link rel="preconnect" href="https://fonts.googleapis.com"/>
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Cairo:wght@400;500;600;700&display=swap"/>
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"/>

        <script>
            tailwind.config = {
                theme: {
                    extend: {
                        colors: {
                            'gulf-teal': '#2DD4BF',
                            'ivory-sand': '#FEFCE8',
                            'slate-charcoal': '#1E293B'
                        },
                        fontFamily: {
                            'cairo': ['Cairo', 'sans-serif'],
                            'inter': ['Inter', 'sans-serif']
                        }
                    }
                }
            }
        </script>

        <style>
            .font-primary {
                font-family: { getFontFamily(isRTL) };
            }

            .gradient-bg {
                background: linear-gradient(135deg, #F0FDFA 0%, #FEFCE8 100%);
            }

            .card-shadow {
                box-shadow: 0 4px 20px rgba(45, 212, 191, 0.1);
            }

            .menu-item:hover {
                background: linear-gradient(90deg, rgba(45, 212, 191, 0.1) 0%, transparent 100%);
                { getHoverBorder(isRTL) }
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(45, 212, 191, 0.15);
            }

            .menu-item:active {
                transform: translateY(0);
                box-shadow: 0 4px 15px rgba(45, 212, 191, 0.2);
                background: linear-gradient(90deg, rgba(45, 212, 191, 0.2) 0%, transparent 100%);
            }

            .menu-item {
                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            }

            .menu-item-icon {
                transition: all 0.3s ease;
            }

            .menu-item:hover .menu-item-icon {
                transform: scale(1.1);
            }

            .menu-item:active .menu-item-icon {
                transform: scale(0.95);
            }

            .badge {
                background: linear-gradient(45deg, #2DD4BF, #06B6D4);
            }

            .notification-badge {
                background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%);
                animation: pulse 2s infinite;
                box-shadow: 0 0 10px rgba(239, 68, 68, 0.5);
            }

            .logout-button:hover {
                background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%);
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
            }

            .dropdown-menu {
                backdrop-filter: blur(10px);
                background: rgba(255, 255, 255, 0.95);
                border: 1px solid rgba(45, 212, 191, 0.1);
                box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
            }

            @keyframes pulse {
                0%, 100% { transform: scale(1); }
                50% { transform: scale(1.05); }
            }
        </style>
    </head>
    <body class="gradient-bg min-h-screen font-primary">

        <!-- Header with Logo, Language Toggle, and User Menu -->
        <header class="bg-white/80 backdrop-blur-sm border-b border-gulf-teal/20 sticky top-0 z-50">
            <div class="max-w-md mx-auto px-4 py-4">
                <div class="flex items-center justify-between">
                    <div class={ getSpaceClass(isRTL) }>
                        <div class="w-8 h-8 bg-gradient-to-br from-gulf-teal to-teal-600 rounded-lg flex items-center justify-center">
                            <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                            </svg>
                        </div>
                        <h1 class="text-xl font-bold text-slate-charcoal">Waqti.me</h1>
                    </div>

                    <!-- Right Side: Language Toggle and User Menu -->
                    <div class="flex items-center space-x-3" x-data="{ showUserMenu: false }">
                        <!-- Language Toggle -->
                        <form method="POST" action="/dashboard/toggle-language">
                            <button type="submit" class="w-8 h-8 bg-white rounded-lg border border-gray-200 hover:bg-gray-50 transition-colors flex items-center justify-center">
                                <span class="text-sm font-bold text-gray-600">
                                    if lang == "ar" {
                                        E
                                    } else {
                                        ع
                                    }
                                </span>
                            </button>
                        </form>

                        <!-- User Menu Dropdown -->
                        <div class="relative">
                            <button
                                @click="showUserMenu = !showUserMenu"
                                @click.away="showUserMenu = false"
                                class="flex items-center space-x-2 p-2 bg-white rounded-lg border border-gray-200 hover:bg-gray-50 transition-colors"
                            >
                                <!-- User Avatar -->
                                if shopSettings != nil && shopSettings.LogoURL != "" {
                                    <img src={ shopSettings.LogoURL } alt="User Avatar" class="w-8 h-8 rounded-full object-cover"/>
                                } else {
                                    <div class="w-8 h-8 bg-gradient-to-br from-gulf-teal to-teal-600 rounded-full flex items-center justify-center">
                                        <span class="text-white font-bold text-sm">
                                            if lang == "ar" {
                                                أ
                                            } else {
                                                A
                                            }
                                        </span>
                                    </div>
                                }
                                <!-- Dropdown Arrow -->
                                <svg class="w-4 h-4 text-gray-600 transition-transform" :class="showUserMenu ? 'rotate-180' : ''" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M7 10l5 5 5-5z"/>
                                </svg>
                            </button>

                            <!-- Dropdown Menu -->
                            <div
                                x-show="showUserMenu"
                                x-transition:enter="transition ease-out duration-200"
                                x-transition:enter-start="opacity-0 scale-95"
                                x-transition:enter-end="opacity-100 scale-100"
                                x-transition:leave="transition ease-in duration-150"
                                x-transition:leave-start="opacity-100 scale-100"
                                x-transition:leave-end="opacity-0 scale-95"
                                class="dropdown-menu absolute mt-2 w-48 rounded-xl py-2 z-50"
                                style={ dropdownMenuStyle(isRTL) }
                            >
                                <!-- User Info -->
                                <div class="px-4 py-3 border-b border-gray-100">
                                    <p class="text-sm font-medium text-slate-charcoal">
                                        if shopSettings != nil {
                                            if lang == "ar" && shopSettings.CreatorNameAr != "" {
                                                { shopSettings.CreatorNameAr }
                                            } else if shopSettings.CreatorName != "" {
                                                { shopSettings.CreatorName }
                                            } else if lang == "ar" {
                                                { creator.NameAr }
                                            } else {
                                                { creator.Name }
                                            }
                                        } else if lang == "ar" {
                                            { creator.NameAr }
                                        } else {
                                            { creator.Name }
                                        }
                                    </p>
                                    <p class="text-xs text-gray-500">{ creator.Email }</p>
                                    <div class="mt-1">
                                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gulf-teal/10 text-gulf-teal">
                                            if lang == "ar" {
                                                { creator.PlanAr }
                                            } else {
                                                { creator.Plan }
                                            }
                                        </span>
                                    </div>
                                </div>

                                <!-- Menu Items -->
                                <div class="py-1">
                                    <!-- Account Settings -->
                                    <a
                                        href="/settings/shop"
                                        class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors"
                                    >
                                        <svg class="w-4 h-4 mr-3 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                                            <path d="M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94L14.4 2.81c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41L9.25 5.35C8.66 5.59 8.12 5.92 7.63 6.29L5.24 5.33c-.22-.08-.47 0-.59.22L2.74 8.87C2.62 9.08 2.66 9.34 2.86 9.48l2.03 1.58C4.84 11.36 4.8 11.69 4.8 12s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61L19.14 12.94zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z"/>
                                        </svg>
                                        if lang == "ar" {
                                            إعدادات الحساب
                                        } else {
                                            Account Settings
                                        }
                                    </a>

                                    <!-- Help & Support -->
                                    <a
                                        href="#"
                                        class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors"
                                    >
                                        <svg class="w-4 h-4 mr-3 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z"/>
                                        </svg>
                                        if lang == "ar" {
                                            المساعدة والدعم
                                        } else {
                                            Help & Support
                                        }
                                    </a>

                                    <!-- Divider -->
                                    <div class="border-t border-gray-100 my-1"></div>

                                    <!-- Logout -->
                                    <form method="POST" action="/signout" class="w-full">
                                        <button
                                            type="submit"
                                            class="logout-button flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50 hover:text-white transition-all duration-200 rounded-lg mx-2"
                                            onclick="return confirm(getLogoutConfirmText())"
                                        >
                                            <svg class="w-4 h-4 mr-3" fill="currentColor" viewBox="0 0 24 24">
                                                <path d="M17 7l-1.41 1.41L18.17 11H8v2h10.17l-2.58 2.59L17 17l5-5zM4 5h8V3H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h8v-2H4V5z"/>
                                            </svg>
                                            if lang == "ar" {
                                                تسجيل الخروج
                                            } else {
                                                Sign Out
                                            }
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        <!-- Main Content -->
        <main class="max-w-md mx-auto px-4 py-6 space-y-6">

            <!-- Creator Info Card -->
            <div class="bg-white rounded-2xl p-6 card-shadow">
                <div class="space-y-4">
                    <!-- Creator Name and Avatar -->
                    <div class="flex items-center justify-between">
                        <div class={ getSpaceClass(isRTL) + " flex-1 min-w-0" }>
                            <!-- Creator Avatar -->
                            if shopSettings != nil && shopSettings.LogoURL != "" {
                                <img src={ shopSettings.LogoURL } alt="Creator Avatar" class="w-12 h-12 rounded-full object-cover flex-shrink-0"/>
                            } else {
                                <div class="w-12 h-12 bg-gradient-to-br from-gulf-teal to-teal-600 rounded-full flex items-center justify-center flex-shrink-0">
                                    <span class="text-white font-bold text-lg">
                                        if lang == "ar" {
                                            أ
                                        } else {
                                            A
                                        }
                                    </span>
                                </div>
                            }
                            <!-- Creator Name -->
                            if isRTL {
                                <p class="font-semibold text-slate-charcoal text-lg truncate mr-4">
                                    if shopSettings != nil {
                                        if lang == "ar" && shopSettings.CreatorNameAr != "" {
                                            { shopSettings.CreatorNameAr }
                                        } else if shopSettings.CreatorName != "" {
                                            { shopSettings.CreatorName }
                                        } else if lang == "ar" {
                                            { creator.NameAr }
                                        } else {
                                            { creator.Name }
                                        }
                                    } else {
                                        if lang == "ar" {
                                            { creator.NameAr }
                                        } else {
                                            { creator.Name }
                                        }
                                    }
                                </p>
                            } else {
                                <p class="font-semibold text-slate-charcoal text-lg truncate ml-4">
                                    if shopSettings != nil {
                                        if lang == "ar" && shopSettings.CreatorNameAr != "" {
                                            { shopSettings.CreatorNameAr }
                                        } else if shopSettings.CreatorName != "" {
                                            { shopSettings.CreatorName }
                                        } else if lang == "ar" {
                                            { creator.NameAr }
                                        } else {
                                            { creator.Name }
                                        }
                                    } else {
                                        if lang == "ar" {
                                            { creator.NameAr }
                                        } else {
                                            { creator.Name }
                                        }
                                    }
                                </p>
                            }
                        </div>
                        <!-- Store QR Code Icon -->
                        <button
                            class="p-3 bg-gradient-to-br from-gulf-teal to-teal-600 hover:from-teal-600 hover:to-gulf-teal rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
                            hx-get="/qr/modal"
                            hx-target="body"
                            hx-swap="beforeend"
                            title="Generate QR Code"
                        >
                            <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 122.61 122.88">
                                <path d="M26.68,26.77H51.91V51.89H26.68V26.77ZM35.67,0H23.07A22.72,22.72,0,0,0,14.3,1.75a23.13,23.13,0,0,0-7.49,5l0,0a23.16,23.16,0,0,0-5,7.49A22.77,22.77,0,0,0,0,23.07V38.64H10.23V23.07a12.9,12.9,0,0,1,1-4.9A12.71,12.71,0,0,1,14,14l0,0a12.83,12.83,0,0,1,9.07-3.75h12.6V0ZM99.54,0H91.31V10.23h8.23a12.94,12.94,0,0,1,4.9,1A13.16,13.16,0,0,1,108.61,14l.35.36h0a13.07,13.07,0,0,1,2.45,3.82,12.67,12.67,0,0,1,1,4.89V38.64h10.23V23.07a22.95,22.95,0,0,0-6.42-15.93h0l-.37-.37a23.16,23.16,0,0,0-7.49-5A22.77,22.77,0,0,0,99.54,0Zm23.07,99.81V82.52H112.38V99.81a12.67,12.67,0,0,1-1,4.89,13.08,13.08,0,0,1-2.8,4.17,12.8,12.8,0,0,1-9.06,3.78H91.31v10.23h8.23a23,23,0,0,0,16.29-6.78,23.34,23.34,0,0,0,5-7.49,23,23,0,0,0,1.75-8.8ZM23.07,122.88h12.6V112.65H23.07A12.8,12.8,0,0,1,14,108.87l-.26-.24a12.83,12.83,0,0,1-2.61-4.08,12.7,12.7,0,0,1-.91-4.74V82.52H0V99.81a22.64,22.64,0,0,0,1.67,8.57,22.86,22.86,0,0,0,4.79,7.38l.31.35a23.2,23.2,0,0,0,7.5,5,22.84,22.84,0,0,0,8.8,1.75Zm66.52-33.1H96v6.33H89.59V89.78Zm-12.36,0h6.44v6H70.8V83.47H77V77.22h6.34V64.76H89.8v6.12h6.12v6.33H89.8v6.33H77.23v6.23ZM58.14,77.12h6.23V70.79h-6V64.46h6V58.13H58.24v6.33H51.8V58.13h6.33V39.33h6.43V58.12h6.23v6.33h6.13V58.12h6.43v6.33H77.23v6.33H70.8V83.24H64.57V95.81H58.14V77.12Zm31.35-19h6.43v6.33H89.49V58.12Zm-50.24,0h6.43v6.33H39.25V58.12Zm-12.57,0h6.43v6.33H26.68V58.12ZM58.14,26.77h6.43V33.1H58.14V26.77ZM26.58,70.88H51.8V96H26.58V70.88ZM32.71,77h13V89.91h-13V77Zm38-50.22H95.92V51.89H70.7V26.77Zm6.13,6.1h13V45.79h-13V32.87Zm-44,0h13V45.79h-13V32.87Z"/>
                            </svg>
                        </button>
                    </div>

                    <!-- Creator Link -->
                    <div>
                        <div class="flex items-center justify-between mb-1">
                            <p class="text-sm text-gray-500">
                                if lang == "ar" {
                                    رابط المتجر
                                } else {
                                    Store Link
                                }
                            </p>
                            <!-- Changes Counter - Now Dynamic -->
                            if urlSettings != nil {
                                <span class="text-xs text-gray-400">
                                    if lang == "ar" {
                                        ({ fmt.Sprintf("%d", urlSettings.MaxChanges - urlSettings.ChangesUsed) } متبقي من { fmt.Sprintf("%d", urlSettings.MaxChanges) })
                                    } else {
                                        ({ fmt.Sprintf("%d", urlSettings.MaxChanges - urlSettings.ChangesUsed) } remaining of { fmt.Sprintf("%d", urlSettings.MaxChanges) })
                                    }
                                </span>
                            }
                        </div>
                        <div
                            id="creator-link-display"
                            class={ getSpaceClass(isRTL) + " bg-gray-50 rounded-lg p-3" }
                        >
                            <svg class="w-4 h-4 text-gulf-teal" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z"/>
                            </svg>
                            <span
                                id="creator-username-display"
                                class="text-sm font-medium text-slate-charcoal flex-1"
                            >
                                waqti.me/{ creator.Username }
                            </span>
                            <div class="flex items-center space-x-2 ml-auto">
                            <!-- Copy Button -->
                            <button
                                data-copy-url={ "waqti.me/" + creator.Username }
                                onclick="copyToClipboard(this.dataset.copyUrl)"
                                class="p-1 hover:bg-gray-200 rounded transition-colors"
                                title={ getCopyTooltip(lang) }
                            >
                                <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"/>
                                </svg>
                            </button>

                            <!-- Edit Button -->
                                if urlSettings != nil && urlSettings.ChangesUsed < urlSettings.MaxChanges {
                                    <button
                                        class="p-1 hover:bg-gray-200 rounded transition-colors"
                                        hx-get="/url/edit"
                                        hx-target="body"
                                        hx-swap="beforeend"
                                    >
                                        <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                                            <path d="M14.06 9L15 9.94L5.92 19H5v-.92L14.06 9M17.66 3c-.25 0-.51.1-.7.29L15.13 5.12L18.88 8.87L20.71 7.04c.39-.39.39-1.04 0-1.41L18.37 3.29c-.2-.2-.45-.29-.71-.29M14.06 6.19L3 17.25V21h3.75L17.81 9.94L14.06 6.19Z"/>
                                        </svg>
                                    </button>
                                } else {
                                    <span class="p-1 text-gray-300" title={ getMaxChangesReachedText(lang) }>
                                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"/>
                                        </svg>
                                    </span>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Creator Plan -->
                    <div>
                        <div class="flex items-center justify-between">
                            <span class="badge text-white px-3 py-1 rounded-full text-sm font-medium">
                                if lang == "ar" {
                                    { creator.PlanAr }
                                } else {
                                    { creator.Plan }
                                }
                            </span>
                            <button class="text-gulf-teal text-sm font-medium hover:underline">
                                if lang == "ar" {
                                    ترقية الخطة
                                } else {
                                    Upgrade Plan
                                }
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- My Workshops Section -->
            <div class="bg-white rounded-2xl p-6 card-shadow">
                <div class="flex items-center justify-center mb-6">
                    <a href="/workshops/add" class="bg-gulf-teal text-white px-6 py-3 rounded-xl text-lg font-semibold hover:bg-teal-600 transition-colors shadow-lg w-full text-center">
                        if lang == "ar" {
                            + إضافة ورشة
                        } else {
                            + Add Workshop
                        }
                    </a>
                </div>

                <!-- Menu Items Grid -->
                <div class="grid grid-cols-2 gap-3">
                    @DashboardMenuItemLink("blue", "M7 7h10v3l4-4-4-4v3H5v6h2V7zm10 10H7v-3l-4 4 4 4v-3h12v-6h-2v4z", getMenuText(lang, "workshops"), "/workshops/reorder", isRTL)

                    <!-- Order Tracking with Notification Badge -->
                    @OrderTrackingMenuItemWithBadge("green", "M16 4c0-1.11.89-2 2-2s2 .89 2 2-.89 2-2 2-2-.89-2-2zm4 18v-6h2.5l-2.54-7.63A1.999 1.999 0 0 0 17.99 7c-.68 0-1.3.37-1.63.93L14.8 10.8l-2.4-2.4A1.959 1.959 0 0 0 10.99 8c-.53 0-1.04.21-1.41.59L7 11.17 5.59 9.76A1.996 1.996 0 0 0 2.76 12.59l2.83 2.83c.78.78 2.05.78 2.83 0L12 11.84l1.79 1.79 1.61-3.22L17 16v6h3z", getMenuText(lang, "enrollment"), "/orders/tracking", pendingOrdersCount, isRTL)

                    @DashboardMenuItemLink("orange", "M5 9.2h3V19H5zM10.6 5h2.8v14h-2.8zm5.6 8H19v6h-2.8z", getMenuText(lang, "analytics"), "/analytics", isRTL)

                    @DashboardMenuItemLink("gray", "M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94L14.4 2.81c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41L9.25 5.35C8.66 5.59 8.12 5.92 7.63 6.29L5.24 5.33c-.22-.08-.47 0-.59.22L2.74 8.87C2.62 9.08 2.66 9.34 2.86 9.48l2.03 1.58C4.84 11.36 4.8 11.69 4.8 12s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61L19.14 12.94zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z", getMenuText(lang, "settings"),"/settings/shop", isRTL)
                </div>
            </div>

            <!-- Bottom Spacing -->
            <div class="h-6"></div>
        </main>

        <script>
            // Add HTMX event listener on dashboard load
            document.addEventListener('htmx:afterRequest', function(event) {
                console.log('Dashboard: HTMX afterRequest event detected');
                console.log('Event target:', event.target);
                console.log('Request URL:', event.detail.pathInfo.requestPath);

                // Check if this is our URL update request
                if (event.detail.pathInfo.requestPath === '/url/update') {
                    console.log('Dashboard: URL update request detected');
                    const responseText = event.detail.xhr.responseText;
                    console.log('Dashboard: Response contains success:', responseText.includes('success'));

                    if (responseText.includes('success')) {
                        console.log('Dashboard: Success detected, extracting username from modal');

                        // Get the username from the modal's input field
                        const usernameInput = document.querySelector('#edit-url-modal input[name="username"]');
                        const newUsername = usernameInput ? usernameInput.value : null;

                        console.log('Dashboard: Extracted username:', newUsername);

                        if (newUsername) {
                            // Update dashboard immediately
                            updateDashboardURL(newUsername);

                            // Show success notification
                            showSuccessNotification();

                            // Close modal after a delay
                            setTimeout(() => {
                                const modal = document.getElementById('edit-url-modal');
                                if (modal) {
                                    console.log('Dashboard: Closing modal');
                                    modal.remove();
                                }
                            }, 2000);
                        } else {
                            console.error('Dashboard: Could not extract username');
                        }
                    }
                }
            });

            // Copy to clipboard function
            function copyToClipboard(text) {
                navigator.clipboard.writeText(text).then(function() {
                    // Show success feedback
                    const button = event.target.closest('button');
                    const originalTitle = button.title;
                    const originalBg = button.style.backgroundColor;
                    const originalColor = button.style.color;

                    button.title = 'Copied!';
                    button.style.backgroundColor = '#2DD4BF';
                    button.style.color = 'white';

                    // Create a visual feedback
                    const feedback = document.createElement('div');
                    feedback.textContent = 'Copied!';
                    feedback.className = 'absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-full bg-green-500 text-white text-xs px-2 py-1 rounded opacity-0 transition-opacity duration-200';
                    feedback.style.zIndex = '1000';

                    const container = button.closest('.relative') || button.parentElement;
                    if (container) {
                        container.style.position = 'relative';
                        container.appendChild(feedback);

                        // Animate in
                        setTimeout(() => feedback.style.opacity = '1', 10);

                        // Animate out and remove
                        setTimeout(() => {
                            feedback.style.opacity = '0';
                            setTimeout(() => {
                                if (feedback.parentElement) {
                                    feedback.parentElement.removeChild(feedback);
                                }
                            }, 200);
                        }, 1500);
                    }

                    setTimeout(() => {
                        button.title = originalTitle;
                        button.style.backgroundColor = originalBg;
                        button.style.color = originalColor;
                    }, 2000);
                }).catch(function() {
                    // Fallback for older browsers
                    const textArea = document.createElement('textarea');
                    textArea.value = text;
                    textArea.style.position = 'fixed';
                    textArea.style.left = '-999999px';
                    textArea.style.top = '-999999px';
                    document.body.appendChild(textArea);
                    textArea.focus();
                    textArea.select();

                    try {
                        document.execCommand('copy');
                        console.log('Copied using fallback method');
                    } catch (err) {
                        console.error('Could not copy text: ', err);
                    }

                    document.body.removeChild(textArea);
                });
            }

            // Function to open edit URL modal
            function openEditModal() {
                // Remove any existing modals first
                const existingModals = document.querySelectorAll('#edit-url-modal');
                existingModals.forEach(modal => modal.remove());

                fetch('/url/edit')
                    .then(response => response.text())
                    .then(html => {
                        // Add new modal to body
                        document.body.insertAdjacentHTML('beforeend', html);

                        // Initialize Alpine.js for the new modal
                        if (window.Alpine) {
                            const modal = document.getElementById('edit-url-modal');
                            if (modal) {
                                window.Alpine.initTree(modal);
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Error opening modal:', error);
                        alert('Error opening edit modal');
                    });
            }

            // Logout confirmation function
            function getLogoutConfirmText() {
                const lang = document.documentElement.lang;
                if (lang === 'ar') {
                    return 'هل أنت متأكد من تسجيل الخروج؟';
                }
                return 'Are you sure you want to sign out?';
            }

            // Function to update the dashboard after URL change - ENHANCED
            function updateDashboardURL(newUsername) {
                console.log('Dashboard: === UPDATING DASHBOARD ===');
                console.log('Dashboard: New username:', newUsername);

                // Update the display
                const usernameDisplay = document.getElementById('creator-username-display');
                console.log('Dashboard: Username display element:', usernameDisplay);

                if (usernameDisplay) {
                    const oldText = usernameDisplay.textContent;
                    usernameDisplay.textContent = 'waqti.me/' + newUsername;
                    console.log('Dashboard: Updated username display from:', oldText, 'to:', usernameDisplay.textContent);
                } else {
                    console.error('Dashboard: Username display element not found!');
                }

                // Update copy button
                const copyButtons = document.querySelectorAll('[data-copy-url]');
                console.log('Dashboard: Found copy buttons:', copyButtons.length);

                copyButtons.forEach((button, index) => {
                    const oldUrl = button.getAttribute('data-copy-url');
                    if (oldUrl && oldUrl.includes('waqti.me/')) {
                        button.setAttribute('data-copy-url', 'waqti.me/' + newUsername);
                        console.log(`Dashboard: Updated copy button ${index} from:`, oldUrl, 'to:', button.getAttribute('data-copy-url'));
                    }
                });

                // Update changes counter
                const changesDisplay = document.querySelector('.text-xs.text-gray-400');
                console.log('Dashboard: Changes display element:', changesDisplay);

                if (changesDisplay) {
                    const currentText = changesDisplay.textContent;
                    console.log('Dashboard: Current changes text:', currentText);

                    // Extract numbers from the text
                    const match = currentText.match(/(\d+)/g);
                    if (match && match.length >= 2) {
                        const currentRemaining = parseInt(match[0]);
                        const total = parseInt(match[1]);
                        const newRemaining = Math.max(0, currentRemaining - 1);

                        console.log('Dashboard: Current remaining:', currentRemaining, 'Total:', total, 'New remaining:', newRemaining);

                        // Update the text based on language
                        if (currentText.includes('remaining')) {
                            changesDisplay.textContent = `(${newRemaining} remaining of ${total})`;
                        } else if (currentText.includes('متبقي')) {
                            changesDisplay.textContent = `(${newRemaining} متبقي من ${total})`;
                        }

                        console.log('Dashboard: Updated changes display to:', changesDisplay.textContent);
                    }
                } else {
                    console.error('Dashboard: Changes display element not found!');
                }

                console.log('Dashboard: === UPDATE COMPLETE ===');
            }

            // Show success notification
            function showSuccessNotification() {
                console.log('Dashboard: Showing success notification');

                const notification = document.createElement('div');
                notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 transform transition-all duration-300';
                notification.style.transform = 'translateY(-100px)';
                notification.innerHTML = `
                    <div class="flex items-center space-x-2">
                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                        </svg>
                        <span>URL updated successfully!</span>
                    </div>
                `;

                document.body.appendChild(notification);

                // Animate in
                setTimeout(() => {
                    notification.style.transform = 'translateY(0)';
                }, 100);

                // Animate out and remove
                setTimeout(() => {
                    notification.style.transform = 'translateY(-100px)';
                    setTimeout(() => {
                        if (notification.parentElement) {
                            notification.parentElement.removeChild(notification);
                        }
                    }, 300);
                }, 3000);
            }

            // Make functions globally available
            window.copyToClipboard = copyToClipboard;
            window.openEditModal = openEditModal;
            window.getLogoutConfirmText = getLogoutConfirmText;
            window.updateDashboardURL = updateDashboardURL;
            window.showSuccessNotification = showSuccessNotification;

            console.log('Dashboard: JavaScript loaded and HTMX event listener added');
        </script>
    </body>
    </html>
}
